/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.jordanupmc.publisher.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class CarMotionData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 1249748981985584512L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CarMotionData\",\"namespace\":\"com.jordanupmc.publisher.dto\",\"fields\":[{\"name\":\"gForceLateral\",\"type\":\"float\"},{\"name\":\"gForceLongitudinal\",\"type\":\"float\"},{\"name\":\"gForceVertical\",\"type\":\"float\"},{\"name\":\"pitch\",\"type\":\"float\"},{\"name\":\"roll\",\"type\":\"float\"},{\"name\":\"worldForwardDirX\",\"type\":\"int\"},{\"name\":\"worldForwardDirY\",\"type\":\"int\"},{\"name\":\"worldForwardDirZ\",\"type\":\"int\"},{\"name\":\"worldPositionX\",\"type\":\"float\"},{\"name\":\"worldPositionY\",\"type\":\"float\"},{\"name\":\"worldPositionZ\",\"type\":\"float\"},{\"name\":\"worldRightDirX\",\"type\":\"int\"},{\"name\":\"worldRightDirY\",\"type\":\"int\"},{\"name\":\"worldRightDirZ\",\"type\":\"int\"},{\"name\":\"worldVelocityX\",\"type\":\"float\"},{\"name\":\"worldVelocityY\",\"type\":\"float\"},{\"name\":\"worldVelocityZ\",\"type\":\"float\"},{\"name\":\"yaw\",\"type\":\"float\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<CarMotionData> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<CarMotionData> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<CarMotionData> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<CarMotionData> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<CarMotionData> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this CarMotionData to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a CarMotionData from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a CarMotionData instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static CarMotionData fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private float gForceLateral;
    private float gForceLongitudinal;
    private float gForceVertical;
    private float pitch;
    private float roll;
    private int worldForwardDirX;
    private int worldForwardDirY;
    private int worldForwardDirZ;
    private float worldPositionX;
    private float worldPositionY;
    private float worldPositionZ;
    private int worldRightDirX;
    private int worldRightDirY;
    private int worldRightDirZ;
    private float worldVelocityX;
    private float worldVelocityY;
    private float worldVelocityZ;
    private float yaw;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public CarMotionData() {
    }

    /**
     * All-args constructor.
     * @param gForceLateral The new value for gForceLateral
     * @param gForceLongitudinal The new value for gForceLongitudinal
     * @param gForceVertical The new value for gForceVertical
     * @param pitch The new value for pitch
     * @param roll The new value for roll
     * @param worldForwardDirX The new value for worldForwardDirX
     * @param worldForwardDirY The new value for worldForwardDirY
     * @param worldForwardDirZ The new value for worldForwardDirZ
     * @param worldPositionX The new value for worldPositionX
     * @param worldPositionY The new value for worldPositionY
     * @param worldPositionZ The new value for worldPositionZ
     * @param worldRightDirX The new value for worldRightDirX
     * @param worldRightDirY The new value for worldRightDirY
     * @param worldRightDirZ The new value for worldRightDirZ
     * @param worldVelocityX The new value for worldVelocityX
     * @param worldVelocityY The new value for worldVelocityY
     * @param worldVelocityZ The new value for worldVelocityZ
     * @param yaw The new value for yaw
     */
    public CarMotionData(java.lang.Float gForceLateral, java.lang.Float gForceLongitudinal, java.lang.Float gForceVertical, java.lang.Float pitch, java.lang.Float roll, java.lang.Integer worldForwardDirX, java.lang.Integer worldForwardDirY, java.lang.Integer worldForwardDirZ, java.lang.Float worldPositionX, java.lang.Float worldPositionY, java.lang.Float worldPositionZ, java.lang.Integer worldRightDirX, java.lang.Integer worldRightDirY, java.lang.Integer worldRightDirZ, java.lang.Float worldVelocityX, java.lang.Float worldVelocityY, java.lang.Float worldVelocityZ, java.lang.Float yaw) {
        this.gForceLateral = gForceLateral;
        this.gForceLongitudinal = gForceLongitudinal;
        this.gForceVertical = gForceVertical;
        this.pitch = pitch;
        this.roll = roll;
        this.worldForwardDirX = worldForwardDirX;
        this.worldForwardDirY = worldForwardDirY;
        this.worldForwardDirZ = worldForwardDirZ;
        this.worldPositionX = worldPositionX;
        this.worldPositionY = worldPositionY;
        this.worldPositionZ = worldPositionZ;
        this.worldRightDirX = worldRightDirX;
        this.worldRightDirY = worldRightDirY;
        this.worldRightDirZ = worldRightDirZ;
        this.worldVelocityX = worldVelocityX;
        this.worldVelocityY = worldVelocityY;
        this.worldVelocityZ = worldVelocityZ;
        this.yaw = yaw;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return gForceLateral;
            case 1:
                return gForceLongitudinal;
            case 2:
                return gForceVertical;
            case 3:
                return pitch;
            case 4:
                return roll;
            case 5:
                return worldForwardDirX;
            case 6:
                return worldForwardDirY;
            case 7:
                return worldForwardDirZ;
            case 8:
                return worldPositionX;
            case 9:
                return worldPositionY;
            case 10:
                return worldPositionZ;
            case 11:
                return worldRightDirX;
            case 12:
                return worldRightDirY;
            case 13:
                return worldRightDirZ;
            case 14:
                return worldVelocityX;
            case 15:
                return worldVelocityY;
            case 16:
                return worldVelocityZ;
            case 17:
                return yaw;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                gForceLateral = (java.lang.Float) value$;
                break;
            case 1:
                gForceLongitudinal = (java.lang.Float) value$;
                break;
            case 2:
                gForceVertical = (java.lang.Float) value$;
                break;
            case 3:
                pitch = (java.lang.Float) value$;
                break;
            case 4:
                roll = (java.lang.Float) value$;
                break;
            case 5:
                worldForwardDirX = (java.lang.Integer) value$;
                break;
            case 6:
                worldForwardDirY = (java.lang.Integer) value$;
                break;
            case 7:
                worldForwardDirZ = (java.lang.Integer) value$;
                break;
            case 8:
                worldPositionX = (java.lang.Float) value$;
                break;
            case 9:
                worldPositionY = (java.lang.Float) value$;
                break;
            case 10:
                worldPositionZ = (java.lang.Float) value$;
                break;
            case 11:
                worldRightDirX = (java.lang.Integer) value$;
                break;
            case 12:
                worldRightDirY = (java.lang.Integer) value$;
                break;
            case 13:
                worldRightDirZ = (java.lang.Integer) value$;
                break;
            case 14:
                worldVelocityX = (java.lang.Float) value$;
                break;
            case 15:
                worldVelocityY = (java.lang.Float) value$;
                break;
            case 16:
                worldVelocityZ = (java.lang.Float) value$;
                break;
            case 17:
                yaw = (java.lang.Float) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'gForceLateral' field.
     * @return The value of the 'gForceLateral' field.
     */
    public float getGForceLateral() {
        return gForceLateral;
    }


    /**
     * Sets the value of the 'gForceLateral' field.
     * @param value the value to set.
     */
    public void setGForceLateral(float value) {
        this.gForceLateral = value;
    }

    /**
     * Gets the value of the 'gForceLongitudinal' field.
     * @return The value of the 'gForceLongitudinal' field.
     */
    public float getGForceLongitudinal() {
        return gForceLongitudinal;
    }


    /**
     * Sets the value of the 'gForceLongitudinal' field.
     * @param value the value to set.
     */
    public void setGForceLongitudinal(float value) {
        this.gForceLongitudinal = value;
    }

    /**
     * Gets the value of the 'gForceVertical' field.
     * @return The value of the 'gForceVertical' field.
     */
    public float getGForceVertical() {
        return gForceVertical;
    }


    /**
     * Sets the value of the 'gForceVertical' field.
     * @param value the value to set.
     */
    public void setGForceVertical(float value) {
        this.gForceVertical = value;
    }

    /**
     * Gets the value of the 'pitch' field.
     * @return The value of the 'pitch' field.
     */
    public float getPitch() {
        return pitch;
    }


    /**
     * Sets the value of the 'pitch' field.
     * @param value the value to set.
     */
    public void setPitch(float value) {
        this.pitch = value;
    }

    /**
     * Gets the value of the 'roll' field.
     * @return The value of the 'roll' field.
     */
    public float getRoll() {
        return roll;
    }


    /**
     * Sets the value of the 'roll' field.
     * @param value the value to set.
     */
    public void setRoll(float value) {
        this.roll = value;
    }

    /**
     * Gets the value of the 'worldForwardDirX' field.
     * @return The value of the 'worldForwardDirX' field.
     */
    public int getWorldForwardDirX() {
        return worldForwardDirX;
    }


    /**
     * Sets the value of the 'worldForwardDirX' field.
     * @param value the value to set.
     */
    public void setWorldForwardDirX(int value) {
        this.worldForwardDirX = value;
    }

    /**
     * Gets the value of the 'worldForwardDirY' field.
     * @return The value of the 'worldForwardDirY' field.
     */
    public int getWorldForwardDirY() {
        return worldForwardDirY;
    }


    /**
     * Sets the value of the 'worldForwardDirY' field.
     * @param value the value to set.
     */
    public void setWorldForwardDirY(int value) {
        this.worldForwardDirY = value;
    }

    /**
     * Gets the value of the 'worldForwardDirZ' field.
     * @return The value of the 'worldForwardDirZ' field.
     */
    public int getWorldForwardDirZ() {
        return worldForwardDirZ;
    }


    /**
     * Sets the value of the 'worldForwardDirZ' field.
     * @param value the value to set.
     */
    public void setWorldForwardDirZ(int value) {
        this.worldForwardDirZ = value;
    }

    /**
     * Gets the value of the 'worldPositionX' field.
     * @return The value of the 'worldPositionX' field.
     */
    public float getWorldPositionX() {
        return worldPositionX;
    }


    /**
     * Sets the value of the 'worldPositionX' field.
     * @param value the value to set.
     */
    public void setWorldPositionX(float value) {
        this.worldPositionX = value;
    }

    /**
     * Gets the value of the 'worldPositionY' field.
     * @return The value of the 'worldPositionY' field.
     */
    public float getWorldPositionY() {
        return worldPositionY;
    }


    /**
     * Sets the value of the 'worldPositionY' field.
     * @param value the value to set.
     */
    public void setWorldPositionY(float value) {
        this.worldPositionY = value;
    }

    /**
     * Gets the value of the 'worldPositionZ' field.
     * @return The value of the 'worldPositionZ' field.
     */
    public float getWorldPositionZ() {
        return worldPositionZ;
    }


    /**
     * Sets the value of the 'worldPositionZ' field.
     * @param value the value to set.
     */
    public void setWorldPositionZ(float value) {
        this.worldPositionZ = value;
    }

    /**
     * Gets the value of the 'worldRightDirX' field.
     * @return The value of the 'worldRightDirX' field.
     */
    public int getWorldRightDirX() {
        return worldRightDirX;
    }


    /**
     * Sets the value of the 'worldRightDirX' field.
     * @param value the value to set.
     */
    public void setWorldRightDirX(int value) {
        this.worldRightDirX = value;
    }

    /**
     * Gets the value of the 'worldRightDirY' field.
     * @return The value of the 'worldRightDirY' field.
     */
    public int getWorldRightDirY() {
        return worldRightDirY;
    }


    /**
     * Sets the value of the 'worldRightDirY' field.
     * @param value the value to set.
     */
    public void setWorldRightDirY(int value) {
        this.worldRightDirY = value;
    }

    /**
     * Gets the value of the 'worldRightDirZ' field.
     * @return The value of the 'worldRightDirZ' field.
     */
    public int getWorldRightDirZ() {
        return worldRightDirZ;
    }


    /**
     * Sets the value of the 'worldRightDirZ' field.
     * @param value the value to set.
     */
    public void setWorldRightDirZ(int value) {
        this.worldRightDirZ = value;
    }

    /**
     * Gets the value of the 'worldVelocityX' field.
     * @return The value of the 'worldVelocityX' field.
     */
    public float getWorldVelocityX() {
        return worldVelocityX;
    }


    /**
     * Sets the value of the 'worldVelocityX' field.
     * @param value the value to set.
     */
    public void setWorldVelocityX(float value) {
        this.worldVelocityX = value;
    }

    /**
     * Gets the value of the 'worldVelocityY' field.
     * @return The value of the 'worldVelocityY' field.
     */
    public float getWorldVelocityY() {
        return worldVelocityY;
    }


    /**
     * Sets the value of the 'worldVelocityY' field.
     * @param value the value to set.
     */
    public void setWorldVelocityY(float value) {
        this.worldVelocityY = value;
    }

    /**
     * Gets the value of the 'worldVelocityZ' field.
     * @return The value of the 'worldVelocityZ' field.
     */
    public float getWorldVelocityZ() {
        return worldVelocityZ;
    }


    /**
     * Sets the value of the 'worldVelocityZ' field.
     * @param value the value to set.
     */
    public void setWorldVelocityZ(float value) {
        this.worldVelocityZ = value;
    }

    /**
     * Gets the value of the 'yaw' field.
     * @return The value of the 'yaw' field.
     */
    public float getYaw() {
        return yaw;
    }


    /**
     * Sets the value of the 'yaw' field.
     * @param value the value to set.
     */
    public void setYaw(float value) {
        this.yaw = value;
    }

    /**
     * Creates a new CarMotionData RecordBuilder.
     * @return A new CarMotionData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarMotionData.Builder newBuilder() {
        return new com.jordanupmc.publisher.dto.CarMotionData.Builder();
    }

    /**
     * Creates a new CarMotionData RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new CarMotionData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarMotionData.Builder newBuilder(com.jordanupmc.publisher.dto.CarMotionData.Builder other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.CarMotionData.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.CarMotionData.Builder(other);
        }
    }

    /**
     * Creates a new CarMotionData RecordBuilder by copying an existing CarMotionData instance.
     * @param other The existing instance to copy.
     * @return A new CarMotionData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarMotionData.Builder newBuilder(com.jordanupmc.publisher.dto.CarMotionData other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.CarMotionData.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.CarMotionData.Builder(other);
        }
    }

    /**
     * RecordBuilder for CarMotionData instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CarMotionData>
            implements org.apache.avro.data.RecordBuilder<CarMotionData> {

        private float gForceLateral;
        private float gForceLongitudinal;
        private float gForceVertical;
        private float pitch;
        private float roll;
        private int worldForwardDirX;
        private int worldForwardDirY;
        private int worldForwardDirZ;
        private float worldPositionX;
        private float worldPositionY;
        private float worldPositionZ;
        private int worldRightDirX;
        private int worldRightDirY;
        private int worldRightDirZ;
        private float worldVelocityX;
        private float worldVelocityY;
        private float worldVelocityZ;
        private float yaw;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.CarMotionData.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.gForceLateral)) {
                this.gForceLateral = data().deepCopy(fields()[0].schema(), other.gForceLateral);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.gForceLongitudinal)) {
                this.gForceLongitudinal = data().deepCopy(fields()[1].schema(), other.gForceLongitudinal);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.gForceVertical)) {
                this.gForceVertical = data().deepCopy(fields()[2].schema(), other.gForceVertical);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.pitch)) {
                this.pitch = data().deepCopy(fields()[3].schema(), other.pitch);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.roll)) {
                this.roll = data().deepCopy(fields()[4].schema(), other.roll);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.worldForwardDirX)) {
                this.worldForwardDirX = data().deepCopy(fields()[5].schema(), other.worldForwardDirX);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.worldForwardDirY)) {
                this.worldForwardDirY = data().deepCopy(fields()[6].schema(), other.worldForwardDirY);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.worldForwardDirZ)) {
                this.worldForwardDirZ = data().deepCopy(fields()[7].schema(), other.worldForwardDirZ);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.worldPositionX)) {
                this.worldPositionX = data().deepCopy(fields()[8].schema(), other.worldPositionX);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.worldPositionY)) {
                this.worldPositionY = data().deepCopy(fields()[9].schema(), other.worldPositionY);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.worldPositionZ)) {
                this.worldPositionZ = data().deepCopy(fields()[10].schema(), other.worldPositionZ);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.worldRightDirX)) {
                this.worldRightDirX = data().deepCopy(fields()[11].schema(), other.worldRightDirX);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.worldRightDirY)) {
                this.worldRightDirY = data().deepCopy(fields()[12].schema(), other.worldRightDirY);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.worldRightDirZ)) {
                this.worldRightDirZ = data().deepCopy(fields()[13].schema(), other.worldRightDirZ);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.worldVelocityX)) {
                this.worldVelocityX = data().deepCopy(fields()[14].schema(), other.worldVelocityX);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.worldVelocityY)) {
                this.worldVelocityY = data().deepCopy(fields()[15].schema(), other.worldVelocityY);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.worldVelocityZ)) {
                this.worldVelocityZ = data().deepCopy(fields()[16].schema(), other.worldVelocityZ);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
            if (isValidValue(fields()[17], other.yaw)) {
                this.yaw = data().deepCopy(fields()[17].schema(), other.yaw);
                fieldSetFlags()[17] = other.fieldSetFlags()[17];
            }
        }

        /**
         * Creates a Builder by copying an existing CarMotionData instance
         * @param other The existing instance to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.CarMotionData other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.gForceLateral)) {
                this.gForceLateral = data().deepCopy(fields()[0].schema(), other.gForceLateral);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.gForceLongitudinal)) {
                this.gForceLongitudinal = data().deepCopy(fields()[1].schema(), other.gForceLongitudinal);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.gForceVertical)) {
                this.gForceVertical = data().deepCopy(fields()[2].schema(), other.gForceVertical);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.pitch)) {
                this.pitch = data().deepCopy(fields()[3].schema(), other.pitch);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.roll)) {
                this.roll = data().deepCopy(fields()[4].schema(), other.roll);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.worldForwardDirX)) {
                this.worldForwardDirX = data().deepCopy(fields()[5].schema(), other.worldForwardDirX);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.worldForwardDirY)) {
                this.worldForwardDirY = data().deepCopy(fields()[6].schema(), other.worldForwardDirY);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.worldForwardDirZ)) {
                this.worldForwardDirZ = data().deepCopy(fields()[7].schema(), other.worldForwardDirZ);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.worldPositionX)) {
                this.worldPositionX = data().deepCopy(fields()[8].schema(), other.worldPositionX);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.worldPositionY)) {
                this.worldPositionY = data().deepCopy(fields()[9].schema(), other.worldPositionY);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.worldPositionZ)) {
                this.worldPositionZ = data().deepCopy(fields()[10].schema(), other.worldPositionZ);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.worldRightDirX)) {
                this.worldRightDirX = data().deepCopy(fields()[11].schema(), other.worldRightDirX);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.worldRightDirY)) {
                this.worldRightDirY = data().deepCopy(fields()[12].schema(), other.worldRightDirY);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.worldRightDirZ)) {
                this.worldRightDirZ = data().deepCopy(fields()[13].schema(), other.worldRightDirZ);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.worldVelocityX)) {
                this.worldVelocityX = data().deepCopy(fields()[14].schema(), other.worldVelocityX);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.worldVelocityY)) {
                this.worldVelocityY = data().deepCopy(fields()[15].schema(), other.worldVelocityY);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.worldVelocityZ)) {
                this.worldVelocityZ = data().deepCopy(fields()[16].schema(), other.worldVelocityZ);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.yaw)) {
                this.yaw = data().deepCopy(fields()[17].schema(), other.yaw);
                fieldSetFlags()[17] = true;
            }
        }

        /**
         * Gets the value of the 'gForceLateral' field.
         * @return The value.
         */
        public float getGForceLateral() {
            return gForceLateral;
        }


        /**
         * Sets the value of the 'gForceLateral' field.
         * @param value The value of 'gForceLateral'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setGForceLateral(float value) {
            validate(fields()[0], value);
            this.gForceLateral = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'gForceLateral' field has been set.
         * @return True if the 'gForceLateral' field has been set, false otherwise.
         */
        public boolean hasGForceLateral() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'gForceLateral' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearGForceLateral() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'gForceLongitudinal' field.
         * @return The value.
         */
        public float getGForceLongitudinal() {
            return gForceLongitudinal;
        }


        /**
         * Sets the value of the 'gForceLongitudinal' field.
         * @param value The value of 'gForceLongitudinal'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setGForceLongitudinal(float value) {
            validate(fields()[1], value);
            this.gForceLongitudinal = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'gForceLongitudinal' field has been set.
         * @return True if the 'gForceLongitudinal' field has been set, false otherwise.
         */
        public boolean hasGForceLongitudinal() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'gForceLongitudinal' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearGForceLongitudinal() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'gForceVertical' field.
         * @return The value.
         */
        public float getGForceVertical() {
            return gForceVertical;
        }


        /**
         * Sets the value of the 'gForceVertical' field.
         * @param value The value of 'gForceVertical'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setGForceVertical(float value) {
            validate(fields()[2], value);
            this.gForceVertical = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'gForceVertical' field has been set.
         * @return True if the 'gForceVertical' field has been set, false otherwise.
         */
        public boolean hasGForceVertical() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'gForceVertical' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearGForceVertical() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'pitch' field.
         * @return The value.
         */
        public float getPitch() {
            return pitch;
        }


        /**
         * Sets the value of the 'pitch' field.
         * @param value The value of 'pitch'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setPitch(float value) {
            validate(fields()[3], value);
            this.pitch = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'pitch' field has been set.
         * @return True if the 'pitch' field has been set, false otherwise.
         */
        public boolean hasPitch() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'pitch' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearPitch() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'roll' field.
         * @return The value.
         */
        public float getRoll() {
            return roll;
        }


        /**
         * Sets the value of the 'roll' field.
         * @param value The value of 'roll'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setRoll(float value) {
            validate(fields()[4], value);
            this.roll = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'roll' field has been set.
         * @return True if the 'roll' field has been set, false otherwise.
         */
        public boolean hasRoll() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'roll' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearRoll() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldForwardDirX' field.
         * @return The value.
         */
        public int getWorldForwardDirX() {
            return worldForwardDirX;
        }


        /**
         * Sets the value of the 'worldForwardDirX' field.
         * @param value The value of 'worldForwardDirX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldForwardDirX(int value) {
            validate(fields()[5], value);
            this.worldForwardDirX = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'worldForwardDirX' field has been set.
         * @return True if the 'worldForwardDirX' field has been set, false otherwise.
         */
        public boolean hasWorldForwardDirX() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'worldForwardDirX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldForwardDirX() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldForwardDirY' field.
         * @return The value.
         */
        public int getWorldForwardDirY() {
            return worldForwardDirY;
        }


        /**
         * Sets the value of the 'worldForwardDirY' field.
         * @param value The value of 'worldForwardDirY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldForwardDirY(int value) {
            validate(fields()[6], value);
            this.worldForwardDirY = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'worldForwardDirY' field has been set.
         * @return True if the 'worldForwardDirY' field has been set, false otherwise.
         */
        public boolean hasWorldForwardDirY() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'worldForwardDirY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldForwardDirY() {
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldForwardDirZ' field.
         * @return The value.
         */
        public int getWorldForwardDirZ() {
            return worldForwardDirZ;
        }


        /**
         * Sets the value of the 'worldForwardDirZ' field.
         * @param value The value of 'worldForwardDirZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldForwardDirZ(int value) {
            validate(fields()[7], value);
            this.worldForwardDirZ = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'worldForwardDirZ' field has been set.
         * @return True if the 'worldForwardDirZ' field has been set, false otherwise.
         */
        public boolean hasWorldForwardDirZ() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'worldForwardDirZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldForwardDirZ() {
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldPositionX' field.
         * @return The value.
         */
        public float getWorldPositionX() {
            return worldPositionX;
        }


        /**
         * Sets the value of the 'worldPositionX' field.
         * @param value The value of 'worldPositionX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldPositionX(float value) {
            validate(fields()[8], value);
            this.worldPositionX = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'worldPositionX' field has been set.
         * @return True if the 'worldPositionX' field has been set, false otherwise.
         */
        public boolean hasWorldPositionX() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'worldPositionX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldPositionX() {
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldPositionY' field.
         * @return The value.
         */
        public float getWorldPositionY() {
            return worldPositionY;
        }


        /**
         * Sets the value of the 'worldPositionY' field.
         * @param value The value of 'worldPositionY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldPositionY(float value) {
            validate(fields()[9], value);
            this.worldPositionY = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'worldPositionY' field has been set.
         * @return True if the 'worldPositionY' field has been set, false otherwise.
         */
        public boolean hasWorldPositionY() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'worldPositionY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldPositionY() {
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldPositionZ' field.
         * @return The value.
         */
        public float getWorldPositionZ() {
            return worldPositionZ;
        }


        /**
         * Sets the value of the 'worldPositionZ' field.
         * @param value The value of 'worldPositionZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldPositionZ(float value) {
            validate(fields()[10], value);
            this.worldPositionZ = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'worldPositionZ' field has been set.
         * @return True if the 'worldPositionZ' field has been set, false otherwise.
         */
        public boolean hasWorldPositionZ() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'worldPositionZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldPositionZ() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldRightDirX' field.
         * @return The value.
         */
        public int getWorldRightDirX() {
            return worldRightDirX;
        }


        /**
         * Sets the value of the 'worldRightDirX' field.
         * @param value The value of 'worldRightDirX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldRightDirX(int value) {
            validate(fields()[11], value);
            this.worldRightDirX = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'worldRightDirX' field has been set.
         * @return True if the 'worldRightDirX' field has been set, false otherwise.
         */
        public boolean hasWorldRightDirX() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'worldRightDirX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldRightDirX() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldRightDirY' field.
         * @return The value.
         */
        public int getWorldRightDirY() {
            return worldRightDirY;
        }


        /**
         * Sets the value of the 'worldRightDirY' field.
         * @param value The value of 'worldRightDirY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldRightDirY(int value) {
            validate(fields()[12], value);
            this.worldRightDirY = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'worldRightDirY' field has been set.
         * @return True if the 'worldRightDirY' field has been set, false otherwise.
         */
        public boolean hasWorldRightDirY() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'worldRightDirY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldRightDirY() {
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldRightDirZ' field.
         * @return The value.
         */
        public int getWorldRightDirZ() {
            return worldRightDirZ;
        }


        /**
         * Sets the value of the 'worldRightDirZ' field.
         * @param value The value of 'worldRightDirZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldRightDirZ(int value) {
            validate(fields()[13], value);
            this.worldRightDirZ = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'worldRightDirZ' field has been set.
         * @return True if the 'worldRightDirZ' field has been set, false otherwise.
         */
        public boolean hasWorldRightDirZ() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'worldRightDirZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldRightDirZ() {
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldVelocityX' field.
         * @return The value.
         */
        public float getWorldVelocityX() {
            return worldVelocityX;
        }


        /**
         * Sets the value of the 'worldVelocityX' field.
         * @param value The value of 'worldVelocityX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldVelocityX(float value) {
            validate(fields()[14], value);
            this.worldVelocityX = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'worldVelocityX' field has been set.
         * @return True if the 'worldVelocityX' field has been set, false otherwise.
         */
        public boolean hasWorldVelocityX() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'worldVelocityX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldVelocityX() {
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldVelocityY' field.
         * @return The value.
         */
        public float getWorldVelocityY() {
            return worldVelocityY;
        }


        /**
         * Sets the value of the 'worldVelocityY' field.
         * @param value The value of 'worldVelocityY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldVelocityY(float value) {
            validate(fields()[15], value);
            this.worldVelocityY = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'worldVelocityY' field has been set.
         * @return True if the 'worldVelocityY' field has been set, false otherwise.
         */
        public boolean hasWorldVelocityY() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'worldVelocityY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldVelocityY() {
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'worldVelocityZ' field.
         * @return The value.
         */
        public float getWorldVelocityZ() {
            return worldVelocityZ;
        }


        /**
         * Sets the value of the 'worldVelocityZ' field.
         * @param value The value of 'worldVelocityZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setWorldVelocityZ(float value) {
            validate(fields()[16], value);
            this.worldVelocityZ = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'worldVelocityZ' field has been set.
         * @return True if the 'worldVelocityZ' field has been set, false otherwise.
         */
        public boolean hasWorldVelocityZ() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'worldVelocityZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearWorldVelocityZ() {
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'yaw' field.
         * @return The value.
         */
        public float getYaw() {
            return yaw;
        }


        /**
         * Sets the value of the 'yaw' field.
         * @param value The value of 'yaw'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder setYaw(float value) {
            validate(fields()[17], value);
            this.yaw = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'yaw' field has been set.
         * @return True if the 'yaw' field has been set, false otherwise.
         */
        public boolean hasYaw() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'yaw' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarMotionData.Builder clearYaw() {
            fieldSetFlags()[17] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public CarMotionData build() {
            try {
                CarMotionData record = new CarMotionData();
                record.gForceLateral = fieldSetFlags()[0] ? this.gForceLateral : (java.lang.Float) defaultValue(fields()[0]);
                record.gForceLongitudinal = fieldSetFlags()[1] ? this.gForceLongitudinal : (java.lang.Float) defaultValue(fields()[1]);
                record.gForceVertical = fieldSetFlags()[2] ? this.gForceVertical : (java.lang.Float) defaultValue(fields()[2]);
                record.pitch = fieldSetFlags()[3] ? this.pitch : (java.lang.Float) defaultValue(fields()[3]);
                record.roll = fieldSetFlags()[4] ? this.roll : (java.lang.Float) defaultValue(fields()[4]);
                record.worldForwardDirX = fieldSetFlags()[5] ? this.worldForwardDirX : (java.lang.Integer) defaultValue(fields()[5]);
                record.worldForwardDirY = fieldSetFlags()[6] ? this.worldForwardDirY : (java.lang.Integer) defaultValue(fields()[6]);
                record.worldForwardDirZ = fieldSetFlags()[7] ? this.worldForwardDirZ : (java.lang.Integer) defaultValue(fields()[7]);
                record.worldPositionX = fieldSetFlags()[8] ? this.worldPositionX : (java.lang.Float) defaultValue(fields()[8]);
                record.worldPositionY = fieldSetFlags()[9] ? this.worldPositionY : (java.lang.Float) defaultValue(fields()[9]);
                record.worldPositionZ = fieldSetFlags()[10] ? this.worldPositionZ : (java.lang.Float) defaultValue(fields()[10]);
                record.worldRightDirX = fieldSetFlags()[11] ? this.worldRightDirX : (java.lang.Integer) defaultValue(fields()[11]);
                record.worldRightDirY = fieldSetFlags()[12] ? this.worldRightDirY : (java.lang.Integer) defaultValue(fields()[12]);
                record.worldRightDirZ = fieldSetFlags()[13] ? this.worldRightDirZ : (java.lang.Integer) defaultValue(fields()[13]);
                record.worldVelocityX = fieldSetFlags()[14] ? this.worldVelocityX : (java.lang.Float) defaultValue(fields()[14]);
                record.worldVelocityY = fieldSetFlags()[15] ? this.worldVelocityY : (java.lang.Float) defaultValue(fields()[15]);
                record.worldVelocityZ = fieldSetFlags()[16] ? this.worldVelocityZ : (java.lang.Float) defaultValue(fields()[16]);
                record.yaw = fieldSetFlags()[17] ? this.yaw : (java.lang.Float) defaultValue(fields()[17]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<CarMotionData>
            WRITER$ = (org.apache.avro.io.DatumWriter<CarMotionData>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<CarMotionData>
            READER$ = (org.apache.avro.io.DatumReader<CarMotionData>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeFloat(this.gForceLateral);

        out.writeFloat(this.gForceLongitudinal);

        out.writeFloat(this.gForceVertical);

        out.writeFloat(this.pitch);

        out.writeFloat(this.roll);

        out.writeInt(this.worldForwardDirX);

        out.writeInt(this.worldForwardDirY);

        out.writeInt(this.worldForwardDirZ);

        out.writeFloat(this.worldPositionX);

        out.writeFloat(this.worldPositionY);

        out.writeFloat(this.worldPositionZ);

        out.writeInt(this.worldRightDirX);

        out.writeInt(this.worldRightDirY);

        out.writeInt(this.worldRightDirZ);

        out.writeFloat(this.worldVelocityX);

        out.writeFloat(this.worldVelocityY);

        out.writeFloat(this.worldVelocityZ);

        out.writeFloat(this.yaw);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.gForceLateral = in.readFloat();

            this.gForceLongitudinal = in.readFloat();

            this.gForceVertical = in.readFloat();

            this.pitch = in.readFloat();

            this.roll = in.readFloat();

            this.worldForwardDirX = in.readInt();

            this.worldForwardDirY = in.readInt();

            this.worldForwardDirZ = in.readInt();

            this.worldPositionX = in.readFloat();

            this.worldPositionY = in.readFloat();

            this.worldPositionZ = in.readFloat();

            this.worldRightDirX = in.readInt();

            this.worldRightDirY = in.readInt();

            this.worldRightDirZ = in.readInt();

            this.worldVelocityX = in.readFloat();

            this.worldVelocityY = in.readFloat();

            this.worldVelocityZ = in.readFloat();

            this.yaw = in.readFloat();

        } else {
            for (int i = 0; i < 18; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.gForceLateral = in.readFloat();
                        break;

                    case 1:
                        this.gForceLongitudinal = in.readFloat();
                        break;

                    case 2:
                        this.gForceVertical = in.readFloat();
                        break;

                    case 3:
                        this.pitch = in.readFloat();
                        break;

                    case 4:
                        this.roll = in.readFloat();
                        break;

                    case 5:
                        this.worldForwardDirX = in.readInt();
                        break;

                    case 6:
                        this.worldForwardDirY = in.readInt();
                        break;

                    case 7:
                        this.worldForwardDirZ = in.readInt();
                        break;

                    case 8:
                        this.worldPositionX = in.readFloat();
                        break;

                    case 9:
                        this.worldPositionY = in.readFloat();
                        break;

                    case 10:
                        this.worldPositionZ = in.readFloat();
                        break;

                    case 11:
                        this.worldRightDirX = in.readInt();
                        break;

                    case 12:
                        this.worldRightDirY = in.readInt();
                        break;

                    case 13:
                        this.worldRightDirZ = in.readInt();
                        break;

                    case 14:
                        this.worldVelocityX = in.readFloat();
                        break;

                    case 15:
                        this.worldVelocityY = in.readFloat();
                        break;

                    case 16:
                        this.worldVelocityZ = in.readFloat();
                        break;

                    case 17:
                        this.yaw = in.readFloat();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










