/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.jordanupmc.publisher.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class CarTelemetryData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6125354513994351733L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CarTelemetryData\",\"namespace\":\"com.jordanupmc.publisher.dto\",\"fields\":[{\"name\":\"brake\",\"type\":\"float\"},{\"name\":\"brakesTemperature\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"java-class\":\"java.util.List\"}},{\"name\":\"clutch\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"drs\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"engineRPM\",\"type\":\"int\"},{\"name\":\"engineTemperature\",\"type\":\"int\"},{\"name\":\"gear\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Byte\"}},{\"name\":\"revLightsPercent\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"speed\",\"type\":\"int\"},{\"name\":\"steer\",\"type\":\"float\"},{\"name\":\"surfaceType\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"},\"java-class\":\"java.util.List\"}},{\"name\":\"throttle\",\"type\":\"float\"},{\"name\":\"tyresInnerTemperature\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"},\"java-class\":\"java.util.List\"}},{\"name\":\"tyresPressure\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}},{\"name\":\"tyresSurfaceTemperature\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"},\"java-class\":\"java.util.List\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<CarTelemetryData> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<CarTelemetryData> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<CarTelemetryData> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<CarTelemetryData> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<CarTelemetryData> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this CarTelemetryData to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a CarTelemetryData from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a CarTelemetryData instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static CarTelemetryData fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private float brake;
    private java.util.List<java.lang.Integer> brakesTemperature;
    private int clutch;
    private int drs;
    private int engineRPM;
    private int engineTemperature;
    private int gear;
    private int revLightsPercent;
    private int speed;
    private float steer;
    private java.util.List<java.lang.Integer> surfaceType;
    private float throttle;
    private java.util.List<java.lang.Integer> tyresInnerTemperature;
    private java.util.List<java.lang.Float> tyresPressure;
    private java.util.List<java.lang.Integer> tyresSurfaceTemperature;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public CarTelemetryData() {
    }

    /**
     * All-args constructor.
     * @param brake The new value for brake
     * @param brakesTemperature The new value for brakesTemperature
     * @param clutch The new value for clutch
     * @param drs The new value for drs
     * @param engineRPM The new value for engineRPM
     * @param engineTemperature The new value for engineTemperature
     * @param gear The new value for gear
     * @param revLightsPercent The new value for revLightsPercent
     * @param speed The new value for speed
     * @param steer The new value for steer
     * @param surfaceType The new value for surfaceType
     * @param throttle The new value for throttle
     * @param tyresInnerTemperature The new value for tyresInnerTemperature
     * @param tyresPressure The new value for tyresPressure
     * @param tyresSurfaceTemperature The new value for tyresSurfaceTemperature
     */
    public CarTelemetryData(java.lang.Float brake, java.util.List<java.lang.Integer> brakesTemperature, java.lang.Integer clutch, java.lang.Integer drs, java.lang.Integer engineRPM, java.lang.Integer engineTemperature, java.lang.Integer gear, java.lang.Integer revLightsPercent, java.lang.Integer speed, java.lang.Float steer, java.util.List<java.lang.Integer> surfaceType, java.lang.Float throttle, java.util.List<java.lang.Integer> tyresInnerTemperature, java.util.List<java.lang.Float> tyresPressure, java.util.List<java.lang.Integer> tyresSurfaceTemperature) {
        this.brake = brake;
        this.brakesTemperature = brakesTemperature;
        this.clutch = clutch;
        this.drs = drs;
        this.engineRPM = engineRPM;
        this.engineTemperature = engineTemperature;
        this.gear = gear;
        this.revLightsPercent = revLightsPercent;
        this.speed = speed;
        this.steer = steer;
        this.surfaceType = surfaceType;
        this.throttle = throttle;
        this.tyresInnerTemperature = tyresInnerTemperature;
        this.tyresPressure = tyresPressure;
        this.tyresSurfaceTemperature = tyresSurfaceTemperature;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return brake;
            case 1:
                return brakesTemperature;
            case 2:
                return clutch;
            case 3:
                return drs;
            case 4:
                return engineRPM;
            case 5:
                return engineTemperature;
            case 6:
                return gear;
            case 7:
                return revLightsPercent;
            case 8:
                return speed;
            case 9:
                return steer;
            case 10:
                return surfaceType;
            case 11:
                return throttle;
            case 12:
                return tyresInnerTemperature;
            case 13:
                return tyresPressure;
            case 14:
                return tyresSurfaceTemperature;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                brake = (java.lang.Float) value$;
                break;
            case 1:
                brakesTemperature = (java.util.List<java.lang.Integer>) value$;
                break;
            case 2:
                clutch = (java.lang.Integer) value$;
                break;
            case 3:
                drs = (java.lang.Integer) value$;
                break;
            case 4:
                engineRPM = (java.lang.Integer) value$;
                break;
            case 5:
                engineTemperature = (java.lang.Integer) value$;
                break;
            case 6:
                gear = (java.lang.Integer) value$;
                break;
            case 7:
                revLightsPercent = (java.lang.Integer) value$;
                break;
            case 8:
                speed = (java.lang.Integer) value$;
                break;
            case 9:
                steer = (java.lang.Float) value$;
                break;
            case 10:
                surfaceType = (java.util.List<java.lang.Integer>) value$;
                break;
            case 11:
                throttle = (java.lang.Float) value$;
                break;
            case 12:
                tyresInnerTemperature = (java.util.List<java.lang.Integer>) value$;
                break;
            case 13:
                tyresPressure = (java.util.List<java.lang.Float>) value$;
                break;
            case 14:
                tyresSurfaceTemperature = (java.util.List<java.lang.Integer>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'brake' field.
     * @return The value of the 'brake' field.
     */
    public float getBrake() {
        return brake;
    }


    /**
     * Sets the value of the 'brake' field.
     * @param value the value to set.
     */
    public void setBrake(float value) {
        this.brake = value;
    }

    /**
     * Gets the value of the 'brakesTemperature' field.
     * @return The value of the 'brakesTemperature' field.
     */
    public java.util.List<java.lang.Integer> getBrakesTemperature() {
        return brakesTemperature;
    }


    /**
     * Sets the value of the 'brakesTemperature' field.
     * @param value the value to set.
     */
    public void setBrakesTemperature(java.util.List<java.lang.Integer> value) {
        this.brakesTemperature = value;
    }

    /**
     * Gets the value of the 'clutch' field.
     * @return The value of the 'clutch' field.
     */
    public int getClutch() {
        return clutch;
    }


    /**
     * Sets the value of the 'clutch' field.
     * @param value the value to set.
     */
    public void setClutch(int value) {
        this.clutch = value;
    }

    /**
     * Gets the value of the 'drs' field.
     * @return The value of the 'drs' field.
     */
    public int getDrs() {
        return drs;
    }


    /**
     * Sets the value of the 'drs' field.
     * @param value the value to set.
     */
    public void setDrs(int value) {
        this.drs = value;
    }

    /**
     * Gets the value of the 'engineRPM' field.
     * @return The value of the 'engineRPM' field.
     */
    public int getEngineRPM() {
        return engineRPM;
    }


    /**
     * Sets the value of the 'engineRPM' field.
     * @param value the value to set.
     */
    public void setEngineRPM(int value) {
        this.engineRPM = value;
    }

    /**
     * Gets the value of the 'engineTemperature' field.
     * @return The value of the 'engineTemperature' field.
     */
    public int getEngineTemperature() {
        return engineTemperature;
    }


    /**
     * Sets the value of the 'engineTemperature' field.
     * @param value the value to set.
     */
    public void setEngineTemperature(int value) {
        this.engineTemperature = value;
    }

    /**
     * Gets the value of the 'gear' field.
     * @return The value of the 'gear' field.
     */
    public int getGear() {
        return gear;
    }


    /**
     * Sets the value of the 'gear' field.
     * @param value the value to set.
     */
    public void setGear(int value) {
        this.gear = value;
    }

    /**
     * Gets the value of the 'revLightsPercent' field.
     * @return The value of the 'revLightsPercent' field.
     */
    public int getRevLightsPercent() {
        return revLightsPercent;
    }


    /**
     * Sets the value of the 'revLightsPercent' field.
     * @param value the value to set.
     */
    public void setRevLightsPercent(int value) {
        this.revLightsPercent = value;
    }

    /**
     * Gets the value of the 'speed' field.
     * @return The value of the 'speed' field.
     */
    public int getSpeed() {
        return speed;
    }


    /**
     * Sets the value of the 'speed' field.
     * @param value the value to set.
     */
    public void setSpeed(int value) {
        this.speed = value;
    }

    /**
     * Gets the value of the 'steer' field.
     * @return The value of the 'steer' field.
     */
    public float getSteer() {
        return steer;
    }


    /**
     * Sets the value of the 'steer' field.
     * @param value the value to set.
     */
    public void setSteer(float value) {
        this.steer = value;
    }

    /**
     * Gets the value of the 'surfaceType' field.
     * @return The value of the 'surfaceType' field.
     */
    public java.util.List<java.lang.Integer> getSurfaceType() {
        return surfaceType;
    }


    /**
     * Sets the value of the 'surfaceType' field.
     * @param value the value to set.
     */
    public void setSurfaceType(java.util.List<java.lang.Integer> value) {
        this.surfaceType = value;
    }

    /**
     * Gets the value of the 'throttle' field.
     * @return The value of the 'throttle' field.
     */
    public float getThrottle() {
        return throttle;
    }


    /**
     * Sets the value of the 'throttle' field.
     * @param value the value to set.
     */
    public void setThrottle(float value) {
        this.throttle = value;
    }

    /**
     * Gets the value of the 'tyresInnerTemperature' field.
     * @return The value of the 'tyresInnerTemperature' field.
     */
    public java.util.List<java.lang.Integer> getTyresInnerTemperature() {
        return tyresInnerTemperature;
    }


    /**
     * Sets the value of the 'tyresInnerTemperature' field.
     * @param value the value to set.
     */
    public void setTyresInnerTemperature(java.util.List<java.lang.Integer> value) {
        this.tyresInnerTemperature = value;
    }

    /**
     * Gets the value of the 'tyresPressure' field.
     * @return The value of the 'tyresPressure' field.
     */
    public java.util.List<java.lang.Float> getTyresPressure() {
        return tyresPressure;
    }


    /**
     * Sets the value of the 'tyresPressure' field.
     * @param value the value to set.
     */
    public void setTyresPressure(java.util.List<java.lang.Float> value) {
        this.tyresPressure = value;
    }

    /**
     * Gets the value of the 'tyresSurfaceTemperature' field.
     * @return The value of the 'tyresSurfaceTemperature' field.
     */
    public java.util.List<java.lang.Integer> getTyresSurfaceTemperature() {
        return tyresSurfaceTemperature;
    }


    /**
     * Sets the value of the 'tyresSurfaceTemperature' field.
     * @param value the value to set.
     */
    public void setTyresSurfaceTemperature(java.util.List<java.lang.Integer> value) {
        this.tyresSurfaceTemperature = value;
    }

    /**
     * Creates a new CarTelemetryData RecordBuilder.
     * @return A new CarTelemetryData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarTelemetryData.Builder newBuilder() {
        return new com.jordanupmc.publisher.dto.CarTelemetryData.Builder();
    }

    /**
     * Creates a new CarTelemetryData RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new CarTelemetryData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarTelemetryData.Builder newBuilder(com.jordanupmc.publisher.dto.CarTelemetryData.Builder other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.CarTelemetryData.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.CarTelemetryData.Builder(other);
        }
    }

    /**
     * Creates a new CarTelemetryData RecordBuilder by copying an existing CarTelemetryData instance.
     * @param other The existing instance to copy.
     * @return A new CarTelemetryData RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.CarTelemetryData.Builder newBuilder(com.jordanupmc.publisher.dto.CarTelemetryData other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.CarTelemetryData.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.CarTelemetryData.Builder(other);
        }
    }

    /**
     * RecordBuilder for CarTelemetryData instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CarTelemetryData>
            implements org.apache.avro.data.RecordBuilder<CarTelemetryData> {

        private float brake;
        private java.util.List<java.lang.Integer> brakesTemperature;
        private int clutch;
        private int drs;
        private int engineRPM;
        private int engineTemperature;
        private int gear;
        private int revLightsPercent;
        private int speed;
        private float steer;
        private java.util.List<java.lang.Integer> surfaceType;
        private float throttle;
        private java.util.List<java.lang.Integer> tyresInnerTemperature;
        private java.util.List<java.lang.Float> tyresPressure;
        private java.util.List<java.lang.Integer> tyresSurfaceTemperature;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.CarTelemetryData.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.brake)) {
                this.brake = data().deepCopy(fields()[0].schema(), other.brake);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.brakesTemperature)) {
                this.brakesTemperature = data().deepCopy(fields()[1].schema(), other.brakesTemperature);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.clutch)) {
                this.clutch = data().deepCopy(fields()[2].schema(), other.clutch);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.drs)) {
                this.drs = data().deepCopy(fields()[3].schema(), other.drs);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.engineRPM)) {
                this.engineRPM = data().deepCopy(fields()[4].schema(), other.engineRPM);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.engineTemperature)) {
                this.engineTemperature = data().deepCopy(fields()[5].schema(), other.engineTemperature);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.gear)) {
                this.gear = data().deepCopy(fields()[6].schema(), other.gear);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.revLightsPercent)) {
                this.revLightsPercent = data().deepCopy(fields()[7].schema(), other.revLightsPercent);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.speed)) {
                this.speed = data().deepCopy(fields()[8].schema(), other.speed);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.steer)) {
                this.steer = data().deepCopy(fields()[9].schema(), other.steer);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.surfaceType)) {
                this.surfaceType = data().deepCopy(fields()[10].schema(), other.surfaceType);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.throttle)) {
                this.throttle = data().deepCopy(fields()[11].schema(), other.throttle);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.tyresInnerTemperature)) {
                this.tyresInnerTemperature = data().deepCopy(fields()[12].schema(), other.tyresInnerTemperature);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.tyresPressure)) {
                this.tyresPressure = data().deepCopy(fields()[13].schema(), other.tyresPressure);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.tyresSurfaceTemperature)) {
                this.tyresSurfaceTemperature = data().deepCopy(fields()[14].schema(), other.tyresSurfaceTemperature);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
        }

        /**
         * Creates a Builder by copying an existing CarTelemetryData instance
         * @param other The existing instance to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.CarTelemetryData other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.brake)) {
                this.brake = data().deepCopy(fields()[0].schema(), other.brake);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.brakesTemperature)) {
                this.brakesTemperature = data().deepCopy(fields()[1].schema(), other.brakesTemperature);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.clutch)) {
                this.clutch = data().deepCopy(fields()[2].schema(), other.clutch);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.drs)) {
                this.drs = data().deepCopy(fields()[3].schema(), other.drs);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.engineRPM)) {
                this.engineRPM = data().deepCopy(fields()[4].schema(), other.engineRPM);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.engineTemperature)) {
                this.engineTemperature = data().deepCopy(fields()[5].schema(), other.engineTemperature);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.gear)) {
                this.gear = data().deepCopy(fields()[6].schema(), other.gear);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.revLightsPercent)) {
                this.revLightsPercent = data().deepCopy(fields()[7].schema(), other.revLightsPercent);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.speed)) {
                this.speed = data().deepCopy(fields()[8].schema(), other.speed);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.steer)) {
                this.steer = data().deepCopy(fields()[9].schema(), other.steer);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.surfaceType)) {
                this.surfaceType = data().deepCopy(fields()[10].schema(), other.surfaceType);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.throttle)) {
                this.throttle = data().deepCopy(fields()[11].schema(), other.throttle);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.tyresInnerTemperature)) {
                this.tyresInnerTemperature = data().deepCopy(fields()[12].schema(), other.tyresInnerTemperature);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.tyresPressure)) {
                this.tyresPressure = data().deepCopy(fields()[13].schema(), other.tyresPressure);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.tyresSurfaceTemperature)) {
                this.tyresSurfaceTemperature = data().deepCopy(fields()[14].schema(), other.tyresSurfaceTemperature);
                fieldSetFlags()[14] = true;
            }
        }

        /**
         * Gets the value of the 'brake' field.
         * @return The value.
         */
        public float getBrake() {
            return brake;
        }


        /**
         * Sets the value of the 'brake' field.
         * @param value The value of 'brake'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setBrake(float value) {
            validate(fields()[0], value);
            this.brake = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'brake' field has been set.
         * @return True if the 'brake' field has been set, false otherwise.
         */
        public boolean hasBrake() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'brake' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearBrake() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'brakesTemperature' field.
         * @return The value.
         */
        public java.util.List<java.lang.Integer> getBrakesTemperature() {
            return brakesTemperature;
        }


        /**
         * Sets the value of the 'brakesTemperature' field.
         * @param value The value of 'brakesTemperature'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setBrakesTemperature(java.util.List<java.lang.Integer> value) {
            validate(fields()[1], value);
            this.brakesTemperature = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'brakesTemperature' field has been set.
         * @return True if the 'brakesTemperature' field has been set, false otherwise.
         */
        public boolean hasBrakesTemperature() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'brakesTemperature' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearBrakesTemperature() {
            brakesTemperature = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'clutch' field.
         * @return The value.
         */
        public int getClutch() {
            return clutch;
        }


        /**
         * Sets the value of the 'clutch' field.
         * @param value The value of 'clutch'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setClutch(int value) {
            validate(fields()[2], value);
            this.clutch = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'clutch' field has been set.
         * @return True if the 'clutch' field has been set, false otherwise.
         */
        public boolean hasClutch() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'clutch' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearClutch() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'drs' field.
         * @return The value.
         */
        public int getDrs() {
            return drs;
        }


        /**
         * Sets the value of the 'drs' field.
         * @param value The value of 'drs'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setDrs(int value) {
            validate(fields()[3], value);
            this.drs = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'drs' field has been set.
         * @return True if the 'drs' field has been set, false otherwise.
         */
        public boolean hasDrs() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'drs' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearDrs() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'engineRPM' field.
         * @return The value.
         */
        public int getEngineRPM() {
            return engineRPM;
        }


        /**
         * Sets the value of the 'engineRPM' field.
         * @param value The value of 'engineRPM'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setEngineRPM(int value) {
            validate(fields()[4], value);
            this.engineRPM = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'engineRPM' field has been set.
         * @return True if the 'engineRPM' field has been set, false otherwise.
         */
        public boolean hasEngineRPM() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'engineRPM' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearEngineRPM() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'engineTemperature' field.
         * @return The value.
         */
        public int getEngineTemperature() {
            return engineTemperature;
        }


        /**
         * Sets the value of the 'engineTemperature' field.
         * @param value The value of 'engineTemperature'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setEngineTemperature(int value) {
            validate(fields()[5], value);
            this.engineTemperature = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'engineTemperature' field has been set.
         * @return True if the 'engineTemperature' field has been set, false otherwise.
         */
        public boolean hasEngineTemperature() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'engineTemperature' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearEngineTemperature() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'gear' field.
         * @return The value.
         */
        public int getGear() {
            return gear;
        }


        /**
         * Sets the value of the 'gear' field.
         * @param value The value of 'gear'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setGear(int value) {
            validate(fields()[6], value);
            this.gear = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'gear' field has been set.
         * @return True if the 'gear' field has been set, false otherwise.
         */
        public boolean hasGear() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'gear' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearGear() {
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'revLightsPercent' field.
         * @return The value.
         */
        public int getRevLightsPercent() {
            return revLightsPercent;
        }


        /**
         * Sets the value of the 'revLightsPercent' field.
         * @param value The value of 'revLightsPercent'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setRevLightsPercent(int value) {
            validate(fields()[7], value);
            this.revLightsPercent = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'revLightsPercent' field has been set.
         * @return True if the 'revLightsPercent' field has been set, false otherwise.
         */
        public boolean hasRevLightsPercent() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'revLightsPercent' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearRevLightsPercent() {
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'speed' field.
         * @return The value.
         */
        public int getSpeed() {
            return speed;
        }


        /**
         * Sets the value of the 'speed' field.
         * @param value The value of 'speed'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setSpeed(int value) {
            validate(fields()[8], value);
            this.speed = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'speed' field has been set.
         * @return True if the 'speed' field has been set, false otherwise.
         */
        public boolean hasSpeed() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'speed' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearSpeed() {
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'steer' field.
         * @return The value.
         */
        public float getSteer() {
            return steer;
        }


        /**
         * Sets the value of the 'steer' field.
         * @param value The value of 'steer'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setSteer(float value) {
            validate(fields()[9], value);
            this.steer = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'steer' field has been set.
         * @return True if the 'steer' field has been set, false otherwise.
         */
        public boolean hasSteer() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'steer' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearSteer() {
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'surfaceType' field.
         * @return The value.
         */
        public java.util.List<java.lang.Integer> getSurfaceType() {
            return surfaceType;
        }


        /**
         * Sets the value of the 'surfaceType' field.
         * @param value The value of 'surfaceType'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setSurfaceType(java.util.List<java.lang.Integer> value) {
            validate(fields()[10], value);
            this.surfaceType = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'surfaceType' field has been set.
         * @return True if the 'surfaceType' field has been set, false otherwise.
         */
        public boolean hasSurfaceType() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'surfaceType' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearSurfaceType() {
            surfaceType = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'throttle' field.
         * @return The value.
         */
        public float getThrottle() {
            return throttle;
        }


        /**
         * Sets the value of the 'throttle' field.
         * @param value The value of 'throttle'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setThrottle(float value) {
            validate(fields()[11], value);
            this.throttle = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'throttle' field has been set.
         * @return True if the 'throttle' field has been set, false otherwise.
         */
        public boolean hasThrottle() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'throttle' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearThrottle() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'tyresInnerTemperature' field.
         * @return The value.
         */
        public java.util.List<java.lang.Integer> getTyresInnerTemperature() {
            return tyresInnerTemperature;
        }


        /**
         * Sets the value of the 'tyresInnerTemperature' field.
         * @param value The value of 'tyresInnerTemperature'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setTyresInnerTemperature(java.util.List<java.lang.Integer> value) {
            validate(fields()[12], value);
            this.tyresInnerTemperature = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'tyresInnerTemperature' field has been set.
         * @return True if the 'tyresInnerTemperature' field has been set, false otherwise.
         */
        public boolean hasTyresInnerTemperature() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'tyresInnerTemperature' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearTyresInnerTemperature() {
            tyresInnerTemperature = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'tyresPressure' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getTyresPressure() {
            return tyresPressure;
        }


        /**
         * Sets the value of the 'tyresPressure' field.
         * @param value The value of 'tyresPressure'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setTyresPressure(java.util.List<java.lang.Float> value) {
            validate(fields()[13], value);
            this.tyresPressure = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'tyresPressure' field has been set.
         * @return True if the 'tyresPressure' field has been set, false otherwise.
         */
        public boolean hasTyresPressure() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'tyresPressure' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearTyresPressure() {
            tyresPressure = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'tyresSurfaceTemperature' field.
         * @return The value.
         */
        public java.util.List<java.lang.Integer> getTyresSurfaceTemperature() {
            return tyresSurfaceTemperature;
        }


        /**
         * Sets the value of the 'tyresSurfaceTemperature' field.
         * @param value The value of 'tyresSurfaceTemperature'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder setTyresSurfaceTemperature(java.util.List<java.lang.Integer> value) {
            validate(fields()[14], value);
            this.tyresSurfaceTemperature = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'tyresSurfaceTemperature' field has been set.
         * @return True if the 'tyresSurfaceTemperature' field has been set, false otherwise.
         */
        public boolean hasTyresSurfaceTemperature() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'tyresSurfaceTemperature' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.CarTelemetryData.Builder clearTyresSurfaceTemperature() {
            tyresSurfaceTemperature = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public CarTelemetryData build() {
            try {
                CarTelemetryData record = new CarTelemetryData();
                record.brake = fieldSetFlags()[0] ? this.brake : (java.lang.Float) defaultValue(fields()[0]);
                record.brakesTemperature = fieldSetFlags()[1] ? this.brakesTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
                record.clutch = fieldSetFlags()[2] ? this.clutch : (java.lang.Integer) defaultValue(fields()[2]);
                record.drs = fieldSetFlags()[3] ? this.drs : (java.lang.Integer) defaultValue(fields()[3]);
                record.engineRPM = fieldSetFlags()[4] ? this.engineRPM : (java.lang.Integer) defaultValue(fields()[4]);
                record.engineTemperature = fieldSetFlags()[5] ? this.engineTemperature : (java.lang.Integer) defaultValue(fields()[5]);
                record.gear = fieldSetFlags()[6] ? this.gear : (java.lang.Integer) defaultValue(fields()[6]);
                record.revLightsPercent = fieldSetFlags()[7] ? this.revLightsPercent : (java.lang.Integer) defaultValue(fields()[7]);
                record.speed = fieldSetFlags()[8] ? this.speed : (java.lang.Integer) defaultValue(fields()[8]);
                record.steer = fieldSetFlags()[9] ? this.steer : (java.lang.Float) defaultValue(fields()[9]);
                record.surfaceType = fieldSetFlags()[10] ? this.surfaceType : (java.util.List<java.lang.Integer>) defaultValue(fields()[10]);
                record.throttle = fieldSetFlags()[11] ? this.throttle : (java.lang.Float) defaultValue(fields()[11]);
                record.tyresInnerTemperature = fieldSetFlags()[12] ? this.tyresInnerTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[12]);
                record.tyresPressure = fieldSetFlags()[13] ? this.tyresPressure : (java.util.List<java.lang.Float>) defaultValue(fields()[13]);
                record.tyresSurfaceTemperature = fieldSetFlags()[14] ? this.tyresSurfaceTemperature : (java.util.List<java.lang.Integer>) defaultValue(fields()[14]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<CarTelemetryData>
            WRITER$ = (org.apache.avro.io.DatumWriter<CarTelemetryData>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<CarTelemetryData>
            READER$ = (org.apache.avro.io.DatumReader<CarTelemetryData>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeFloat(this.brake);

        long size0 = this.brakesTemperature.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (java.lang.Integer e0 : this.brakesTemperature) {
            actualSize0++;
            out.startItem();
            out.writeInt(e0);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

        out.writeInt(this.clutch);

        out.writeInt(this.drs);

        out.writeInt(this.engineRPM);

        out.writeInt(this.engineTemperature);

        out.writeInt(this.gear);

        out.writeInt(this.revLightsPercent);

        out.writeInt(this.speed);

        out.writeFloat(this.steer);

        long size1 = this.surfaceType.size();
        out.writeArrayStart();
        out.setItemCount(size1);
        long actualSize1 = 0;
        for (java.lang.Integer e1 : this.surfaceType) {
            actualSize1++;
            out.startItem();
            out.writeInt(e1);
        }
        out.writeArrayEnd();
        if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

        out.writeFloat(this.throttle);

        long size2 = this.tyresInnerTemperature.size();
        out.writeArrayStart();
        out.setItemCount(size2);
        long actualSize2 = 0;
        for (java.lang.Integer e2 : this.tyresInnerTemperature) {
            actualSize2++;
            out.startItem();
            out.writeInt(e2);
        }
        out.writeArrayEnd();
        if (actualSize2 != size2)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

        long size3 = this.tyresPressure.size();
        out.writeArrayStart();
        out.setItemCount(size3);
        long actualSize3 = 0;
        for (java.lang.Float e3 : this.tyresPressure) {
            actualSize3++;
            out.startItem();
            out.writeFloat(e3);
        }
        out.writeArrayEnd();
        if (actualSize3 != size3)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

        long size4 = this.tyresSurfaceTemperature.size();
        out.writeArrayStart();
        out.setItemCount(size4);
        long actualSize4 = 0;
        for (java.lang.Integer e4 : this.tyresSurfaceTemperature) {
            actualSize4++;
            out.startItem();
            out.writeInt(e4);
        }
        out.writeArrayEnd();
        if (actualSize4 != size4)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.brake = in.readFloat();

            long size0 = in.readArrayStart();
            java.util.List<java.lang.Integer> a0 = this.brakesTemperature;
            if (a0 == null) {
                a0 = new SpecificData.Array<java.lang.Integer>((int) size0, SCHEMA$.getField("brakesTemperature").schema());
                this.brakesTemperature = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
                    e0 = in.readInt();
                    a0.add(e0);
                }
            }

            this.clutch = in.readInt();

            this.drs = in.readInt();

            this.engineRPM = in.readInt();

            this.engineTemperature = in.readInt();

            this.gear = in.readInt();

            this.revLightsPercent = in.readInt();

            this.speed = in.readInt();

            this.steer = in.readFloat();

            long size1 = in.readArrayStart();
            java.util.List<java.lang.Integer> a1 = this.surfaceType;
            if (a1 == null) {
                a1 = new SpecificData.Array<java.lang.Integer>((int) size1, SCHEMA$.getField("surfaceType").schema());
                this.surfaceType = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a1 : null);
            for (; 0 < size1; size1 = in.arrayNext()) {
                for (; size1 != 0; size1--) {
                    java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                    e1 = in.readInt();
                    a1.add(e1);
                }
            }

            this.throttle = in.readFloat();

            long size2 = in.readArrayStart();
            java.util.List<java.lang.Integer> a2 = this.tyresInnerTemperature;
            if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Integer>((int) size2, SCHEMA$.getField("tyresInnerTemperature").schema());
                this.tyresInnerTemperature = a2;
            } else a2.clear();
            SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a2 : null);
            for (; 0 < size2; size2 = in.arrayNext()) {
                for (; size2 != 0; size2--) {
                    java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
                    e2 = in.readInt();
                    a2.add(e2);
                }
            }

            long size3 = in.readArrayStart();
            java.util.List<java.lang.Float> a3 = this.tyresPressure;
            if (a3 == null) {
                a3 = new SpecificData.Array<java.lang.Float>((int) size3, SCHEMA$.getField("tyresPressure").schema());
                this.tyresPressure = a3;
            } else a3.clear();
            SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a3 : null);
            for (; 0 < size3; size3 = in.arrayNext()) {
                for (; size3 != 0; size3--) {
                    java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
                    e3 = in.readFloat();
                    a3.add(e3);
                }
            }

            long size4 = in.readArrayStart();
            java.util.List<java.lang.Integer> a4 = this.tyresSurfaceTemperature;
            if (a4 == null) {
                a4 = new SpecificData.Array<java.lang.Integer>((int) size4, SCHEMA$.getField("tyresSurfaceTemperature").schema());
                this.tyresSurfaceTemperature = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.Integer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a4 : null);
            for (; 0 < size4; size4 = in.arrayNext()) {
                for (; size4 != 0; size4--) {
                    java.lang.Integer e4 = (ga4 != null ? ga4.peek() : null);
                    e4 = in.readInt();
                    a4.add(e4);
                }
            }

        } else {
            for (int i = 0; i < 15; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.brake = in.readFloat();
                        break;

                    case 1:
                        long size0 = in.readArrayStart();
                        java.util.List<java.lang.Integer> a0 = this.brakesTemperature;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<java.lang.Integer>((int) size0, SCHEMA$.getField("brakesTemperature").schema());
                            this.brakesTemperature = a0;
                        } else a0.clear();
                        SpecificData.Array<java.lang.Integer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                java.lang.Integer e0 = (ga0 != null ? ga0.peek() : null);
                                e0 = in.readInt();
                                a0.add(e0);
                            }
                        }
                        break;

                    case 2:
                        this.clutch = in.readInt();
                        break;

                    case 3:
                        this.drs = in.readInt();
                        break;

                    case 4:
                        this.engineRPM = in.readInt();
                        break;

                    case 5:
                        this.engineTemperature = in.readInt();
                        break;

                    case 6:
                        this.gear = in.readInt();
                        break;

                    case 7:
                        this.revLightsPercent = in.readInt();
                        break;

                    case 8:
                        this.speed = in.readInt();
                        break;

                    case 9:
                        this.steer = in.readFloat();
                        break;

                    case 10:
                        long size1 = in.readArrayStart();
                        java.util.List<java.lang.Integer> a1 = this.surfaceType;
                        if (a1 == null) {
                            a1 = new SpecificData.Array<java.lang.Integer>((int) size1, SCHEMA$.getField("surfaceType").schema());
                            this.surfaceType = a1;
                        } else a1.clear();
                        SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a1 : null);
                        for (; 0 < size1; size1 = in.arrayNext()) {
                            for (; size1 != 0; size1--) {
                                java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                                e1 = in.readInt();
                                a1.add(e1);
                            }
                        }
                        break;

                    case 11:
                        this.throttle = in.readFloat();
                        break;

                    case 12:
                        long size2 = in.readArrayStart();
                        java.util.List<java.lang.Integer> a2 = this.tyresInnerTemperature;
                        if (a2 == null) {
                            a2 = new SpecificData.Array<java.lang.Integer>((int) size2, SCHEMA$.getField("tyresInnerTemperature").schema());
                            this.tyresInnerTemperature = a2;
                        } else a2.clear();
                        SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a2 : null);
                        for (; 0 < size2; size2 = in.arrayNext()) {
                            for (; size2 != 0; size2--) {
                                java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
                                e2 = in.readInt();
                                a2.add(e2);
                            }
                        }
                        break;

                    case 13:
                        long size3 = in.readArrayStart();
                        java.util.List<java.lang.Float> a3 = this.tyresPressure;
                        if (a3 == null) {
                            a3 = new SpecificData.Array<java.lang.Float>((int) size3, SCHEMA$.getField("tyresPressure").schema());
                            this.tyresPressure = a3;
                        } else a3.clear();
                        SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a3 : null);
                        for (; 0 < size3; size3 = in.arrayNext()) {
                            for (; size3 != 0; size3--) {
                                java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
                                e3 = in.readFloat();
                                a3.add(e3);
                            }
                        }
                        break;

                    case 14:
                        long size4 = in.readArrayStart();
                        java.util.List<java.lang.Integer> a4 = this.tyresSurfaceTemperature;
                        if (a4 == null) {
                            a4 = new SpecificData.Array<java.lang.Integer>((int) size4, SCHEMA$.getField("tyresSurfaceTemperature").schema());
                            this.tyresSurfaceTemperature = a4;
                        } else a4.clear();
                        SpecificData.Array<java.lang.Integer> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a4 : null);
                        for (; 0 < size4; size4 = in.arrayNext()) {
                            for (; size4 != 0; size4--) {
                                java.lang.Integer e4 = (ga4 != null ? ga4.peek() : null);
                                e4 = in.readInt();
                                a4.add(e4);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










