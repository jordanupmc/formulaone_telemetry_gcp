/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.jordanupmc.publisher.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class PacketMotionDataDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6710959704832039025L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PacketMotionDataDTO\",\"namespace\":\"com.jordanupmc.publisher.dto\",\"fields\":[{\"name\":\"angularAccelerationX\",\"type\":\"float\"},{\"name\":\"angularAccelerationY\",\"type\":\"float\"},{\"name\":\"angularAccelerationZ\",\"type\":\"float\"},{\"name\":\"angularVelocityX\",\"type\":\"float\"},{\"name\":\"angularVelocityY\",\"type\":\"float\"},{\"name\":\"angularVelocityZ\",\"type\":\"float\"},{\"name\":\"carMotionData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CarMotionData\",\"fields\":[{\"name\":\"gForceLateral\",\"type\":\"float\"},{\"name\":\"gForceLongitudinal\",\"type\":\"float\"},{\"name\":\"gForceVertical\",\"type\":\"float\"},{\"name\":\"pitch\",\"type\":\"float\"},{\"name\":\"roll\",\"type\":\"float\"},{\"name\":\"worldForwardDirX\",\"type\":\"int\"},{\"name\":\"worldForwardDirY\",\"type\":\"int\"},{\"name\":\"worldForwardDirZ\",\"type\":\"int\"},{\"name\":\"worldPositionX\",\"type\":\"float\"},{\"name\":\"worldPositionY\",\"type\":\"float\"},{\"name\":\"worldPositionZ\",\"type\":\"float\"},{\"name\":\"worldRightDirX\",\"type\":\"int\"},{\"name\":\"worldRightDirY\",\"type\":\"int\"},{\"name\":\"worldRightDirZ\",\"type\":\"int\"},{\"name\":\"worldVelocityX\",\"type\":\"float\"},{\"name\":\"worldVelocityY\",\"type\":\"float\"},{\"name\":\"worldVelocityZ\",\"type\":\"float\"},{\"name\":\"yaw\",\"type\":\"float\"}]},\"java-class\":\"java.util.List\"}},{\"name\":\"frontWheelsAngle\",\"type\":\"float\"},{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"PacketHeader\",\"fields\":[{\"name\":\"frameIdentifier\",\"type\":\"long\"},{\"name\":\"gameMajorVersion\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"gameMinorVersion\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"packetFormat\",\"type\":\"int\"},{\"name\":\"packetId\",\"type\":{\"type\":\"enum\",\"name\":\"PacketId\",\"symbols\":[\"MOTION\",\"SESSION\",\"LAP_DATA\",\"EVENT\",\"PARTICIPANTS\",\"CAR_SETUPS\",\"CAR_TELEMETRY\",\"CAR_STATUS\",\"FINAL_CLASSIFICATION\",\"LOBBY_INFO\",\"CAR_DAMAGE\",\"SESSION_HISTORY\"]}},{\"name\":\"packetVersion\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"playerCarIndex\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"secondaryPlayerCarIndex\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Short\"}},{\"name\":\"sessionTime\",\"type\":\"float\"},{\"name\":\"sessionUID\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigInteger\"}}]}},{\"name\":\"localVelocityX\",\"type\":\"float\"},{\"name\":\"localVelocityY\",\"type\":\"float\"},{\"name\":\"localVelocityZ\",\"type\":\"float\"},{\"name\":\"suspensionAcceleration\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}},{\"name\":\"suspensionPosition\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}},{\"name\":\"suspensionVelocity\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}},{\"name\":\"wheelSlip\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}},{\"name\":\"wheelSpeed\",\"type\":{\"type\":\"array\",\"items\":\"float\",\"java-class\":\"java.util.List\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<PacketMotionDataDTO> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<PacketMotionDataDTO> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<PacketMotionDataDTO> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<PacketMotionDataDTO> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<PacketMotionDataDTO> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this PacketMotionDataDTO to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a PacketMotionDataDTO from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a PacketMotionDataDTO instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static PacketMotionDataDTO fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private float angularAccelerationX;
    private float angularAccelerationY;
    private float angularAccelerationZ;
    private float angularVelocityX;
    private float angularVelocityY;
    private float angularVelocityZ;
    private java.util.List<com.jordanupmc.publisher.dto.CarMotionData> carMotionData;
    private float frontWheelsAngle;
    private com.jordanupmc.publisher.dto.PacketHeader header;
    private float localVelocityX;
    private float localVelocityY;
    private float localVelocityZ;
    private java.util.List<java.lang.Float> suspensionAcceleration;
    private java.util.List<java.lang.Float> suspensionPosition;
    private java.util.List<java.lang.Float> suspensionVelocity;
    private java.util.List<java.lang.Float> wheelSlip;
    private java.util.List<java.lang.Float> wheelSpeed;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public PacketMotionDataDTO() {
    }

    /**
     * All-args constructor.
     * @param angularAccelerationX The new value for angularAccelerationX
     * @param angularAccelerationY The new value for angularAccelerationY
     * @param angularAccelerationZ The new value for angularAccelerationZ
     * @param angularVelocityX The new value for angularVelocityX
     * @param angularVelocityY The new value for angularVelocityY
     * @param angularVelocityZ The new value for angularVelocityZ
     * @param carMotionData The new value for carMotionData
     * @param frontWheelsAngle The new value for frontWheelsAngle
     * @param header The new value for header
     * @param localVelocityX The new value for localVelocityX
     * @param localVelocityY The new value for localVelocityY
     * @param localVelocityZ The new value for localVelocityZ
     * @param suspensionAcceleration The new value for suspensionAcceleration
     * @param suspensionPosition The new value for suspensionPosition
     * @param suspensionVelocity The new value for suspensionVelocity
     * @param wheelSlip The new value for wheelSlip
     * @param wheelSpeed The new value for wheelSpeed
     */
    public PacketMotionDataDTO(java.lang.Float angularAccelerationX, java.lang.Float angularAccelerationY, java.lang.Float angularAccelerationZ, java.lang.Float angularVelocityX, java.lang.Float angularVelocityY, java.lang.Float angularVelocityZ, java.util.List<com.jordanupmc.publisher.dto.CarMotionData> carMotionData, java.lang.Float frontWheelsAngle, com.jordanupmc.publisher.dto.PacketHeader header, java.lang.Float localVelocityX, java.lang.Float localVelocityY, java.lang.Float localVelocityZ, java.util.List<java.lang.Float> suspensionAcceleration, java.util.List<java.lang.Float> suspensionPosition, java.util.List<java.lang.Float> suspensionVelocity, java.util.List<java.lang.Float> wheelSlip, java.util.List<java.lang.Float> wheelSpeed) {
        this.angularAccelerationX = angularAccelerationX;
        this.angularAccelerationY = angularAccelerationY;
        this.angularAccelerationZ = angularAccelerationZ;
        this.angularVelocityX = angularVelocityX;
        this.angularVelocityY = angularVelocityY;
        this.angularVelocityZ = angularVelocityZ;
        this.carMotionData = carMotionData;
        this.frontWheelsAngle = frontWheelsAngle;
        this.header = header;
        this.localVelocityX = localVelocityX;
        this.localVelocityY = localVelocityY;
        this.localVelocityZ = localVelocityZ;
        this.suspensionAcceleration = suspensionAcceleration;
        this.suspensionPosition = suspensionPosition;
        this.suspensionVelocity = suspensionVelocity;
        this.wheelSlip = wheelSlip;
        this.wheelSpeed = wheelSpeed;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return angularAccelerationX;
            case 1:
                return angularAccelerationY;
            case 2:
                return angularAccelerationZ;
            case 3:
                return angularVelocityX;
            case 4:
                return angularVelocityY;
            case 5:
                return angularVelocityZ;
            case 6:
                return carMotionData;
            case 7:
                return frontWheelsAngle;
            case 8:
                return header;
            case 9:
                return localVelocityX;
            case 10:
                return localVelocityY;
            case 11:
                return localVelocityZ;
            case 12:
                return suspensionAcceleration;
            case 13:
                return suspensionPosition;
            case 14:
                return suspensionVelocity;
            case 15:
                return wheelSlip;
            case 16:
                return wheelSpeed;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                angularAccelerationX = (java.lang.Float) value$;
                break;
            case 1:
                angularAccelerationY = (java.lang.Float) value$;
                break;
            case 2:
                angularAccelerationZ = (java.lang.Float) value$;
                break;
            case 3:
                angularVelocityX = (java.lang.Float) value$;
                break;
            case 4:
                angularVelocityY = (java.lang.Float) value$;
                break;
            case 5:
                angularVelocityZ = (java.lang.Float) value$;
                break;
            case 6:
                carMotionData = (java.util.List<com.jordanupmc.publisher.dto.CarMotionData>) value$;
                break;
            case 7:
                frontWheelsAngle = (java.lang.Float) value$;
                break;
            case 8:
                header = (com.jordanupmc.publisher.dto.PacketHeader) value$;
                break;
            case 9:
                localVelocityX = (java.lang.Float) value$;
                break;
            case 10:
                localVelocityY = (java.lang.Float) value$;
                break;
            case 11:
                localVelocityZ = (java.lang.Float) value$;
                break;
            case 12:
                suspensionAcceleration = (java.util.List<java.lang.Float>) value$;
                break;
            case 13:
                suspensionPosition = (java.util.List<java.lang.Float>) value$;
                break;
            case 14:
                suspensionVelocity = (java.util.List<java.lang.Float>) value$;
                break;
            case 15:
                wheelSlip = (java.util.List<java.lang.Float>) value$;
                break;
            case 16:
                wheelSpeed = (java.util.List<java.lang.Float>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'angularAccelerationX' field.
     * @return The value of the 'angularAccelerationX' field.
     */
    public float getAngularAccelerationX() {
        return angularAccelerationX;
    }


    /**
     * Sets the value of the 'angularAccelerationX' field.
     * @param value the value to set.
     */
    public void setAngularAccelerationX(float value) {
        this.angularAccelerationX = value;
    }

    /**
     * Gets the value of the 'angularAccelerationY' field.
     * @return The value of the 'angularAccelerationY' field.
     */
    public float getAngularAccelerationY() {
        return angularAccelerationY;
    }


    /**
     * Sets the value of the 'angularAccelerationY' field.
     * @param value the value to set.
     */
    public void setAngularAccelerationY(float value) {
        this.angularAccelerationY = value;
    }

    /**
     * Gets the value of the 'angularAccelerationZ' field.
     * @return The value of the 'angularAccelerationZ' field.
     */
    public float getAngularAccelerationZ() {
        return angularAccelerationZ;
    }


    /**
     * Sets the value of the 'angularAccelerationZ' field.
     * @param value the value to set.
     */
    public void setAngularAccelerationZ(float value) {
        this.angularAccelerationZ = value;
    }

    /**
     * Gets the value of the 'angularVelocityX' field.
     * @return The value of the 'angularVelocityX' field.
     */
    public float getAngularVelocityX() {
        return angularVelocityX;
    }


    /**
     * Sets the value of the 'angularVelocityX' field.
     * @param value the value to set.
     */
    public void setAngularVelocityX(float value) {
        this.angularVelocityX = value;
    }

    /**
     * Gets the value of the 'angularVelocityY' field.
     * @return The value of the 'angularVelocityY' field.
     */
    public float getAngularVelocityY() {
        return angularVelocityY;
    }


    /**
     * Sets the value of the 'angularVelocityY' field.
     * @param value the value to set.
     */
    public void setAngularVelocityY(float value) {
        this.angularVelocityY = value;
    }

    /**
     * Gets the value of the 'angularVelocityZ' field.
     * @return The value of the 'angularVelocityZ' field.
     */
    public float getAngularVelocityZ() {
        return angularVelocityZ;
    }


    /**
     * Sets the value of the 'angularVelocityZ' field.
     * @param value the value to set.
     */
    public void setAngularVelocityZ(float value) {
        this.angularVelocityZ = value;
    }

    /**
     * Gets the value of the 'carMotionData' field.
     * @return The value of the 'carMotionData' field.
     */
    public java.util.List<com.jordanupmc.publisher.dto.CarMotionData> getCarMotionData() {
        return carMotionData;
    }


    /**
     * Sets the value of the 'carMotionData' field.
     * @param value the value to set.
     */
    public void setCarMotionData(java.util.List<com.jordanupmc.publisher.dto.CarMotionData> value) {
        this.carMotionData = value;
    }

    /**
     * Gets the value of the 'frontWheelsAngle' field.
     * @return The value of the 'frontWheelsAngle' field.
     */
    public float getFrontWheelsAngle() {
        return frontWheelsAngle;
    }


    /**
     * Sets the value of the 'frontWheelsAngle' field.
     * @param value the value to set.
     */
    public void setFrontWheelsAngle(float value) {
        this.frontWheelsAngle = value;
    }

    /**
     * Gets the value of the 'header' field.
     * @return The value of the 'header' field.
     */
    public com.jordanupmc.publisher.dto.PacketHeader getHeader() {
        return header;
    }


    /**
     * Sets the value of the 'header' field.
     * @param value the value to set.
     */
    public void setHeader(com.jordanupmc.publisher.dto.PacketHeader value) {
        this.header = value;
    }

    /**
     * Gets the value of the 'localVelocityX' field.
     * @return The value of the 'localVelocityX' field.
     */
    public float getLocalVelocityX() {
        return localVelocityX;
    }


    /**
     * Sets the value of the 'localVelocityX' field.
     * @param value the value to set.
     */
    public void setLocalVelocityX(float value) {
        this.localVelocityX = value;
    }

    /**
     * Gets the value of the 'localVelocityY' field.
     * @return The value of the 'localVelocityY' field.
     */
    public float getLocalVelocityY() {
        return localVelocityY;
    }


    /**
     * Sets the value of the 'localVelocityY' field.
     * @param value the value to set.
     */
    public void setLocalVelocityY(float value) {
        this.localVelocityY = value;
    }

    /**
     * Gets the value of the 'localVelocityZ' field.
     * @return The value of the 'localVelocityZ' field.
     */
    public float getLocalVelocityZ() {
        return localVelocityZ;
    }


    /**
     * Sets the value of the 'localVelocityZ' field.
     * @param value the value to set.
     */
    public void setLocalVelocityZ(float value) {
        this.localVelocityZ = value;
    }

    /**
     * Gets the value of the 'suspensionAcceleration' field.
     * @return The value of the 'suspensionAcceleration' field.
     */
    public java.util.List<java.lang.Float> getSuspensionAcceleration() {
        return suspensionAcceleration;
    }


    /**
     * Sets the value of the 'suspensionAcceleration' field.
     * @param value the value to set.
     */
    public void setSuspensionAcceleration(java.util.List<java.lang.Float> value) {
        this.suspensionAcceleration = value;
    }

    /**
     * Gets the value of the 'suspensionPosition' field.
     * @return The value of the 'suspensionPosition' field.
     */
    public java.util.List<java.lang.Float> getSuspensionPosition() {
        return suspensionPosition;
    }


    /**
     * Sets the value of the 'suspensionPosition' field.
     * @param value the value to set.
     */
    public void setSuspensionPosition(java.util.List<java.lang.Float> value) {
        this.suspensionPosition = value;
    }

    /**
     * Gets the value of the 'suspensionVelocity' field.
     * @return The value of the 'suspensionVelocity' field.
     */
    public java.util.List<java.lang.Float> getSuspensionVelocity() {
        return suspensionVelocity;
    }


    /**
     * Sets the value of the 'suspensionVelocity' field.
     * @param value the value to set.
     */
    public void setSuspensionVelocity(java.util.List<java.lang.Float> value) {
        this.suspensionVelocity = value;
    }

    /**
     * Gets the value of the 'wheelSlip' field.
     * @return The value of the 'wheelSlip' field.
     */
    public java.util.List<java.lang.Float> getWheelSlip() {
        return wheelSlip;
    }


    /**
     * Sets the value of the 'wheelSlip' field.
     * @param value the value to set.
     */
    public void setWheelSlip(java.util.List<java.lang.Float> value) {
        this.wheelSlip = value;
    }

    /**
     * Gets the value of the 'wheelSpeed' field.
     * @return The value of the 'wheelSpeed' field.
     */
    public java.util.List<java.lang.Float> getWheelSpeed() {
        return wheelSpeed;
    }


    /**
     * Sets the value of the 'wheelSpeed' field.
     * @param value the value to set.
     */
    public void setWheelSpeed(java.util.List<java.lang.Float> value) {
        this.wheelSpeed = value;
    }

    /**
     * Creates a new PacketMotionDataDTO RecordBuilder.
     * @return A new PacketMotionDataDTO RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder newBuilder() {
        return new com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder();
    }

    /**
     * Creates a new PacketMotionDataDTO RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new PacketMotionDataDTO RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder newBuilder(com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder(other);
        }
    }

    /**
     * Creates a new PacketMotionDataDTO RecordBuilder by copying an existing PacketMotionDataDTO instance.
     * @param other The existing instance to copy.
     * @return A new PacketMotionDataDTO RecordBuilder
     */
    public static com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder newBuilder(com.jordanupmc.publisher.dto.PacketMotionDataDTO other) {
        if (other == null) {
            return new com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder();
        } else {
            return new com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder(other);
        }
    }

    /**
     * RecordBuilder for PacketMotionDataDTO instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PacketMotionDataDTO>
            implements org.apache.avro.data.RecordBuilder<PacketMotionDataDTO> {

        private float angularAccelerationX;
        private float angularAccelerationY;
        private float angularAccelerationZ;
        private float angularVelocityX;
        private float angularVelocityY;
        private float angularVelocityZ;
        private java.util.List<com.jordanupmc.publisher.dto.CarMotionData> carMotionData;
        private float frontWheelsAngle;
        private com.jordanupmc.publisher.dto.PacketHeader header;
        private com.jordanupmc.publisher.dto.PacketHeader.Builder headerBuilder;
        private float localVelocityX;
        private float localVelocityY;
        private float localVelocityZ;
        private java.util.List<java.lang.Float> suspensionAcceleration;
        private java.util.List<java.lang.Float> suspensionPosition;
        private java.util.List<java.lang.Float> suspensionVelocity;
        private java.util.List<java.lang.Float> wheelSlip;
        private java.util.List<java.lang.Float> wheelSpeed;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.angularAccelerationX)) {
                this.angularAccelerationX = data().deepCopy(fields()[0].schema(), other.angularAccelerationX);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.angularAccelerationY)) {
                this.angularAccelerationY = data().deepCopy(fields()[1].schema(), other.angularAccelerationY);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.angularAccelerationZ)) {
                this.angularAccelerationZ = data().deepCopy(fields()[2].schema(), other.angularAccelerationZ);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.angularVelocityX)) {
                this.angularVelocityX = data().deepCopy(fields()[3].schema(), other.angularVelocityX);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.angularVelocityY)) {
                this.angularVelocityY = data().deepCopy(fields()[4].schema(), other.angularVelocityY);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.angularVelocityZ)) {
                this.angularVelocityZ = data().deepCopy(fields()[5].schema(), other.angularVelocityZ);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.carMotionData)) {
                this.carMotionData = data().deepCopy(fields()[6].schema(), other.carMotionData);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.frontWheelsAngle)) {
                this.frontWheelsAngle = data().deepCopy(fields()[7].schema(), other.frontWheelsAngle);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.header)) {
                this.header = data().deepCopy(fields()[8].schema(), other.header);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (other.hasHeaderBuilder()) {
                this.headerBuilder = com.jordanupmc.publisher.dto.PacketHeader.newBuilder(other.getHeaderBuilder());
            }
            if (isValidValue(fields()[9], other.localVelocityX)) {
                this.localVelocityX = data().deepCopy(fields()[9].schema(), other.localVelocityX);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.localVelocityY)) {
                this.localVelocityY = data().deepCopy(fields()[10].schema(), other.localVelocityY);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.localVelocityZ)) {
                this.localVelocityZ = data().deepCopy(fields()[11].schema(), other.localVelocityZ);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.suspensionAcceleration)) {
                this.suspensionAcceleration = data().deepCopy(fields()[12].schema(), other.suspensionAcceleration);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.suspensionPosition)) {
                this.suspensionPosition = data().deepCopy(fields()[13].schema(), other.suspensionPosition);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.suspensionVelocity)) {
                this.suspensionVelocity = data().deepCopy(fields()[14].schema(), other.suspensionVelocity);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.wheelSlip)) {
                this.wheelSlip = data().deepCopy(fields()[15].schema(), other.wheelSlip);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.wheelSpeed)) {
                this.wheelSpeed = data().deepCopy(fields()[16].schema(), other.wheelSpeed);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
        }

        /**
         * Creates a Builder by copying an existing PacketMotionDataDTO instance
         * @param other The existing instance to copy.
         */
        private Builder(com.jordanupmc.publisher.dto.PacketMotionDataDTO other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.angularAccelerationX)) {
                this.angularAccelerationX = data().deepCopy(fields()[0].schema(), other.angularAccelerationX);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.angularAccelerationY)) {
                this.angularAccelerationY = data().deepCopy(fields()[1].schema(), other.angularAccelerationY);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.angularAccelerationZ)) {
                this.angularAccelerationZ = data().deepCopy(fields()[2].schema(), other.angularAccelerationZ);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.angularVelocityX)) {
                this.angularVelocityX = data().deepCopy(fields()[3].schema(), other.angularVelocityX);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.angularVelocityY)) {
                this.angularVelocityY = data().deepCopy(fields()[4].schema(), other.angularVelocityY);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.angularVelocityZ)) {
                this.angularVelocityZ = data().deepCopy(fields()[5].schema(), other.angularVelocityZ);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.carMotionData)) {
                this.carMotionData = data().deepCopy(fields()[6].schema(), other.carMotionData);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.frontWheelsAngle)) {
                this.frontWheelsAngle = data().deepCopy(fields()[7].schema(), other.frontWheelsAngle);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.header)) {
                this.header = data().deepCopy(fields()[8].schema(), other.header);
                fieldSetFlags()[8] = true;
            }
            this.headerBuilder = null;
            if (isValidValue(fields()[9], other.localVelocityX)) {
                this.localVelocityX = data().deepCopy(fields()[9].schema(), other.localVelocityX);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.localVelocityY)) {
                this.localVelocityY = data().deepCopy(fields()[10].schema(), other.localVelocityY);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.localVelocityZ)) {
                this.localVelocityZ = data().deepCopy(fields()[11].schema(), other.localVelocityZ);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.suspensionAcceleration)) {
                this.suspensionAcceleration = data().deepCopy(fields()[12].schema(), other.suspensionAcceleration);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.suspensionPosition)) {
                this.suspensionPosition = data().deepCopy(fields()[13].schema(), other.suspensionPosition);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.suspensionVelocity)) {
                this.suspensionVelocity = data().deepCopy(fields()[14].schema(), other.suspensionVelocity);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.wheelSlip)) {
                this.wheelSlip = data().deepCopy(fields()[15].schema(), other.wheelSlip);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.wheelSpeed)) {
                this.wheelSpeed = data().deepCopy(fields()[16].schema(), other.wheelSpeed);
                fieldSetFlags()[16] = true;
            }
        }

        /**
         * Gets the value of the 'angularAccelerationX' field.
         * @return The value.
         */
        public float getAngularAccelerationX() {
            return angularAccelerationX;
        }


        /**
         * Sets the value of the 'angularAccelerationX' field.
         * @param value The value of 'angularAccelerationX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularAccelerationX(float value) {
            validate(fields()[0], value);
            this.angularAccelerationX = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'angularAccelerationX' field has been set.
         * @return True if the 'angularAccelerationX' field has been set, false otherwise.
         */
        public boolean hasAngularAccelerationX() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'angularAccelerationX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularAccelerationX() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularAccelerationY' field.
         * @return The value.
         */
        public float getAngularAccelerationY() {
            return angularAccelerationY;
        }


        /**
         * Sets the value of the 'angularAccelerationY' field.
         * @param value The value of 'angularAccelerationY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularAccelerationY(float value) {
            validate(fields()[1], value);
            this.angularAccelerationY = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'angularAccelerationY' field has been set.
         * @return True if the 'angularAccelerationY' field has been set, false otherwise.
         */
        public boolean hasAngularAccelerationY() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'angularAccelerationY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularAccelerationY() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularAccelerationZ' field.
         * @return The value.
         */
        public float getAngularAccelerationZ() {
            return angularAccelerationZ;
        }


        /**
         * Sets the value of the 'angularAccelerationZ' field.
         * @param value The value of 'angularAccelerationZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularAccelerationZ(float value) {
            validate(fields()[2], value);
            this.angularAccelerationZ = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'angularAccelerationZ' field has been set.
         * @return True if the 'angularAccelerationZ' field has been set, false otherwise.
         */
        public boolean hasAngularAccelerationZ() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'angularAccelerationZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularAccelerationZ() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularVelocityX' field.
         * @return The value.
         */
        public float getAngularVelocityX() {
            return angularVelocityX;
        }


        /**
         * Sets the value of the 'angularVelocityX' field.
         * @param value The value of 'angularVelocityX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularVelocityX(float value) {
            validate(fields()[3], value);
            this.angularVelocityX = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'angularVelocityX' field has been set.
         * @return True if the 'angularVelocityX' field has been set, false otherwise.
         */
        public boolean hasAngularVelocityX() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'angularVelocityX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularVelocityX() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularVelocityY' field.
         * @return The value.
         */
        public float getAngularVelocityY() {
            return angularVelocityY;
        }


        /**
         * Sets the value of the 'angularVelocityY' field.
         * @param value The value of 'angularVelocityY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularVelocityY(float value) {
            validate(fields()[4], value);
            this.angularVelocityY = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'angularVelocityY' field has been set.
         * @return True if the 'angularVelocityY' field has been set, false otherwise.
         */
        public boolean hasAngularVelocityY() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'angularVelocityY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularVelocityY() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularVelocityZ' field.
         * @return The value.
         */
        public float getAngularVelocityZ() {
            return angularVelocityZ;
        }


        /**
         * Sets the value of the 'angularVelocityZ' field.
         * @param value The value of 'angularVelocityZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setAngularVelocityZ(float value) {
            validate(fields()[5], value);
            this.angularVelocityZ = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'angularVelocityZ' field has been set.
         * @return True if the 'angularVelocityZ' field has been set, false otherwise.
         */
        public boolean hasAngularVelocityZ() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'angularVelocityZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearAngularVelocityZ() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'carMotionData' field.
         * @return The value.
         */
        public java.util.List<com.jordanupmc.publisher.dto.CarMotionData> getCarMotionData() {
            return carMotionData;
        }


        /**
         * Sets the value of the 'carMotionData' field.
         * @param value The value of 'carMotionData'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setCarMotionData(java.util.List<com.jordanupmc.publisher.dto.CarMotionData> value) {
            validate(fields()[6], value);
            this.carMotionData = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'carMotionData' field has been set.
         * @return True if the 'carMotionData' field has been set, false otherwise.
         */
        public boolean hasCarMotionData() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'carMotionData' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearCarMotionData() {
            carMotionData = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'frontWheelsAngle' field.
         * @return The value.
         */
        public float getFrontWheelsAngle() {
            return frontWheelsAngle;
        }


        /**
         * Sets the value of the 'frontWheelsAngle' field.
         * @param value The value of 'frontWheelsAngle'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setFrontWheelsAngle(float value) {
            validate(fields()[7], value);
            this.frontWheelsAngle = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'frontWheelsAngle' field has been set.
         * @return True if the 'frontWheelsAngle' field has been set, false otherwise.
         */
        public boolean hasFrontWheelsAngle() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'frontWheelsAngle' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearFrontWheelsAngle() {
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'header' field.
         * @return The value.
         */
        public com.jordanupmc.publisher.dto.PacketHeader getHeader() {
            return header;
        }


        /**
         * Sets the value of the 'header' field.
         * @param value The value of 'header'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setHeader(com.jordanupmc.publisher.dto.PacketHeader value) {
            validate(fields()[8], value);
            this.headerBuilder = null;
            this.header = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'header' field has been set.
         * @return True if the 'header' field has been set, false otherwise.
         */
        public boolean hasHeader() {
            return fieldSetFlags()[8];
        }

        /**
         * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketHeader.Builder getHeaderBuilder() {
            if (headerBuilder == null) {
                if (hasHeader()) {
                    setHeaderBuilder(com.jordanupmc.publisher.dto.PacketHeader.newBuilder(header));
                } else {
                    setHeaderBuilder(com.jordanupmc.publisher.dto.PacketHeader.newBuilder());
                }
            }
            return headerBuilder;
        }

        /**
         * Sets the Builder instance for the 'header' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setHeaderBuilder(com.jordanupmc.publisher.dto.PacketHeader.Builder value) {
            clearHeader();
            headerBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'header' field has an active Builder instance
         * @return True if the 'header' field has an active Builder instance
         */
        public boolean hasHeaderBuilder() {
            return headerBuilder != null;
        }

        /**
         * Clears the value of the 'header' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearHeader() {
            header = null;
            headerBuilder = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'localVelocityX' field.
         * @return The value.
         */
        public float getLocalVelocityX() {
            return localVelocityX;
        }


        /**
         * Sets the value of the 'localVelocityX' field.
         * @param value The value of 'localVelocityX'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setLocalVelocityX(float value) {
            validate(fields()[9], value);
            this.localVelocityX = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'localVelocityX' field has been set.
         * @return True if the 'localVelocityX' field has been set, false otherwise.
         */
        public boolean hasLocalVelocityX() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'localVelocityX' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearLocalVelocityX() {
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'localVelocityY' field.
         * @return The value.
         */
        public float getLocalVelocityY() {
            return localVelocityY;
        }


        /**
         * Sets the value of the 'localVelocityY' field.
         * @param value The value of 'localVelocityY'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setLocalVelocityY(float value) {
            validate(fields()[10], value);
            this.localVelocityY = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'localVelocityY' field has been set.
         * @return True if the 'localVelocityY' field has been set, false otherwise.
         */
        public boolean hasLocalVelocityY() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'localVelocityY' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearLocalVelocityY() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'localVelocityZ' field.
         * @return The value.
         */
        public float getLocalVelocityZ() {
            return localVelocityZ;
        }


        /**
         * Sets the value of the 'localVelocityZ' field.
         * @param value The value of 'localVelocityZ'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setLocalVelocityZ(float value) {
            validate(fields()[11], value);
            this.localVelocityZ = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'localVelocityZ' field has been set.
         * @return True if the 'localVelocityZ' field has been set, false otherwise.
         */
        public boolean hasLocalVelocityZ() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'localVelocityZ' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearLocalVelocityZ() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'suspensionAcceleration' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getSuspensionAcceleration() {
            return suspensionAcceleration;
        }


        /**
         * Sets the value of the 'suspensionAcceleration' field.
         * @param value The value of 'suspensionAcceleration'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setSuspensionAcceleration(java.util.List<java.lang.Float> value) {
            validate(fields()[12], value);
            this.suspensionAcceleration = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'suspensionAcceleration' field has been set.
         * @return True if the 'suspensionAcceleration' field has been set, false otherwise.
         */
        public boolean hasSuspensionAcceleration() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'suspensionAcceleration' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearSuspensionAcceleration() {
            suspensionAcceleration = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'suspensionPosition' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getSuspensionPosition() {
            return suspensionPosition;
        }


        /**
         * Sets the value of the 'suspensionPosition' field.
         * @param value The value of 'suspensionPosition'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setSuspensionPosition(java.util.List<java.lang.Float> value) {
            validate(fields()[13], value);
            this.suspensionPosition = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'suspensionPosition' field has been set.
         * @return True if the 'suspensionPosition' field has been set, false otherwise.
         */
        public boolean hasSuspensionPosition() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'suspensionPosition' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearSuspensionPosition() {
            suspensionPosition = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'suspensionVelocity' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getSuspensionVelocity() {
            return suspensionVelocity;
        }


        /**
         * Sets the value of the 'suspensionVelocity' field.
         * @param value The value of 'suspensionVelocity'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setSuspensionVelocity(java.util.List<java.lang.Float> value) {
            validate(fields()[14], value);
            this.suspensionVelocity = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'suspensionVelocity' field has been set.
         * @return True if the 'suspensionVelocity' field has been set, false otherwise.
         */
        public boolean hasSuspensionVelocity() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'suspensionVelocity' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearSuspensionVelocity() {
            suspensionVelocity = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'wheelSlip' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getWheelSlip() {
            return wheelSlip;
        }


        /**
         * Sets the value of the 'wheelSlip' field.
         * @param value The value of 'wheelSlip'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setWheelSlip(java.util.List<java.lang.Float> value) {
            validate(fields()[15], value);
            this.wheelSlip = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'wheelSlip' field has been set.
         * @return True if the 'wheelSlip' field has been set, false otherwise.
         */
        public boolean hasWheelSlip() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'wheelSlip' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearWheelSlip() {
            wheelSlip = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'wheelSpeed' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getWheelSpeed() {
            return wheelSpeed;
        }


        /**
         * Sets the value of the 'wheelSpeed' field.
         * @param value The value of 'wheelSpeed'.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder setWheelSpeed(java.util.List<java.lang.Float> value) {
            validate(fields()[16], value);
            this.wheelSpeed = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'wheelSpeed' field has been set.
         * @return True if the 'wheelSpeed' field has been set, false otherwise.
         */
        public boolean hasWheelSpeed() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'wheelSpeed' field.
         * @return This builder.
         */
        public com.jordanupmc.publisher.dto.PacketMotionDataDTO.Builder clearWheelSpeed() {
            wheelSpeed = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public PacketMotionDataDTO build() {
            try {
                PacketMotionDataDTO record = new PacketMotionDataDTO();
                record.angularAccelerationX = fieldSetFlags()[0] ? this.angularAccelerationX : (java.lang.Float) defaultValue(fields()[0]);
                record.angularAccelerationY = fieldSetFlags()[1] ? this.angularAccelerationY : (java.lang.Float) defaultValue(fields()[1]);
                record.angularAccelerationZ = fieldSetFlags()[2] ? this.angularAccelerationZ : (java.lang.Float) defaultValue(fields()[2]);
                record.angularVelocityX = fieldSetFlags()[3] ? this.angularVelocityX : (java.lang.Float) defaultValue(fields()[3]);
                record.angularVelocityY = fieldSetFlags()[4] ? this.angularVelocityY : (java.lang.Float) defaultValue(fields()[4]);
                record.angularVelocityZ = fieldSetFlags()[5] ? this.angularVelocityZ : (java.lang.Float) defaultValue(fields()[5]);
                record.carMotionData = fieldSetFlags()[6] ? this.carMotionData : (java.util.List<com.jordanupmc.publisher.dto.CarMotionData>) defaultValue(fields()[6]);
                record.frontWheelsAngle = fieldSetFlags()[7] ? this.frontWheelsAngle : (java.lang.Float) defaultValue(fields()[7]);
                if (headerBuilder != null) {
                    try {
                        record.header = this.headerBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("header"));
                        throw e;
                    }
                } else {
                    record.header = fieldSetFlags()[8] ? this.header : (com.jordanupmc.publisher.dto.PacketHeader) defaultValue(fields()[8]);
                }
                record.localVelocityX = fieldSetFlags()[9] ? this.localVelocityX : (java.lang.Float) defaultValue(fields()[9]);
                record.localVelocityY = fieldSetFlags()[10] ? this.localVelocityY : (java.lang.Float) defaultValue(fields()[10]);
                record.localVelocityZ = fieldSetFlags()[11] ? this.localVelocityZ : (java.lang.Float) defaultValue(fields()[11]);
                record.suspensionAcceleration = fieldSetFlags()[12] ? this.suspensionAcceleration : (java.util.List<java.lang.Float>) defaultValue(fields()[12]);
                record.suspensionPosition = fieldSetFlags()[13] ? this.suspensionPosition : (java.util.List<java.lang.Float>) defaultValue(fields()[13]);
                record.suspensionVelocity = fieldSetFlags()[14] ? this.suspensionVelocity : (java.util.List<java.lang.Float>) defaultValue(fields()[14]);
                record.wheelSlip = fieldSetFlags()[15] ? this.wheelSlip : (java.util.List<java.lang.Float>) defaultValue(fields()[15]);
                record.wheelSpeed = fieldSetFlags()[16] ? this.wheelSpeed : (java.util.List<java.lang.Float>) defaultValue(fields()[16]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<PacketMotionDataDTO>
            WRITER$ = (org.apache.avro.io.DatumWriter<PacketMotionDataDTO>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<PacketMotionDataDTO>
            READER$ = (org.apache.avro.io.DatumReader<PacketMotionDataDTO>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeFloat(this.angularAccelerationX);

        out.writeFloat(this.angularAccelerationY);

        out.writeFloat(this.angularAccelerationZ);

        out.writeFloat(this.angularVelocityX);

        out.writeFloat(this.angularVelocityY);

        out.writeFloat(this.angularVelocityZ);

        long size0 = this.carMotionData.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (com.jordanupmc.publisher.dto.CarMotionData e0 : this.carMotionData) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

        out.writeFloat(this.frontWheelsAngle);

        this.header.customEncode(out);

        out.writeFloat(this.localVelocityX);

        out.writeFloat(this.localVelocityY);

        out.writeFloat(this.localVelocityZ);

        long size1 = this.suspensionAcceleration.size();
        out.writeArrayStart();
        out.setItemCount(size1);
        long actualSize1 = 0;
        for (java.lang.Float e1 : this.suspensionAcceleration) {
            actualSize1++;
            out.startItem();
            out.writeFloat(e1);
        }
        out.writeArrayEnd();
        if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

        long size2 = this.suspensionPosition.size();
        out.writeArrayStart();
        out.setItemCount(size2);
        long actualSize2 = 0;
        for (java.lang.Float e2 : this.suspensionPosition) {
            actualSize2++;
            out.startItem();
            out.writeFloat(e2);
        }
        out.writeArrayEnd();
        if (actualSize2 != size2)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

        long size3 = this.suspensionVelocity.size();
        out.writeArrayStart();
        out.setItemCount(size3);
        long actualSize3 = 0;
        for (java.lang.Float e3 : this.suspensionVelocity) {
            actualSize3++;
            out.startItem();
            out.writeFloat(e3);
        }
        out.writeArrayEnd();
        if (actualSize3 != size3)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

        long size4 = this.wheelSlip.size();
        out.writeArrayStart();
        out.setItemCount(size4);
        long actualSize4 = 0;
        for (java.lang.Float e4 : this.wheelSlip) {
            actualSize4++;
            out.startItem();
            out.writeFloat(e4);
        }
        out.writeArrayEnd();
        if (actualSize4 != size4)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

        long size5 = this.wheelSpeed.size();
        out.writeArrayStart();
        out.setItemCount(size5);
        long actualSize5 = 0;
        for (java.lang.Float e5 : this.wheelSpeed) {
            actualSize5++;
            out.startItem();
            out.writeFloat(e5);
        }
        out.writeArrayEnd();
        if (actualSize5 != size5)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.angularAccelerationX = in.readFloat();

            this.angularAccelerationY = in.readFloat();

            this.angularAccelerationZ = in.readFloat();

            this.angularVelocityX = in.readFloat();

            this.angularVelocityY = in.readFloat();

            this.angularVelocityZ = in.readFloat();

            long size0 = in.readArrayStart();
            java.util.List<com.jordanupmc.publisher.dto.CarMotionData> a0 = this.carMotionData;
            if (a0 == null) {
                a0 = new SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData>((int) size0, SCHEMA$.getField("carMotionData").schema());
                this.carMotionData = a0;
            } else a0.clear();
            SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    com.jordanupmc.publisher.dto.CarMotionData e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new com.jordanupmc.publisher.dto.CarMotionData();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

            this.frontWheelsAngle = in.readFloat();

            if (this.header == null) {
                this.header = new com.jordanupmc.publisher.dto.PacketHeader();
            }
            this.header.customDecode(in);

            this.localVelocityX = in.readFloat();

            this.localVelocityY = in.readFloat();

            this.localVelocityZ = in.readFloat();

            long size1 = in.readArrayStart();
            java.util.List<java.lang.Float> a1 = this.suspensionAcceleration;
            if (a1 == null) {
                a1 = new SpecificData.Array<java.lang.Float>((int) size1, SCHEMA$.getField("suspensionAcceleration").schema());
                this.suspensionAcceleration = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a1 : null);
            for (; 0 < size1; size1 = in.arrayNext()) {
                for (; size1 != 0; size1--) {
                    java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
                    e1 = in.readFloat();
                    a1.add(e1);
                }
            }

            long size2 = in.readArrayStart();
            java.util.List<java.lang.Float> a2 = this.suspensionPosition;
            if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Float>((int) size2, SCHEMA$.getField("suspensionPosition").schema());
                this.suspensionPosition = a2;
            } else a2.clear();
            SpecificData.Array<java.lang.Float> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a2 : null);
            for (; 0 < size2; size2 = in.arrayNext()) {
                for (; size2 != 0; size2--) {
                    java.lang.Float e2 = (ga2 != null ? ga2.peek() : null);
                    e2 = in.readFloat();
                    a2.add(e2);
                }
            }

            long size3 = in.readArrayStart();
            java.util.List<java.lang.Float> a3 = this.suspensionVelocity;
            if (a3 == null) {
                a3 = new SpecificData.Array<java.lang.Float>((int) size3, SCHEMA$.getField("suspensionVelocity").schema());
                this.suspensionVelocity = a3;
            } else a3.clear();
            SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a3 : null);
            for (; 0 < size3; size3 = in.arrayNext()) {
                for (; size3 != 0; size3--) {
                    java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
                    e3 = in.readFloat();
                    a3.add(e3);
                }
            }

            long size4 = in.readArrayStart();
            java.util.List<java.lang.Float> a4 = this.wheelSlip;
            if (a4 == null) {
                a4 = new SpecificData.Array<java.lang.Float>((int) size4, SCHEMA$.getField("wheelSlip").schema());
                this.wheelSlip = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.Float> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a4 : null);
            for (; 0 < size4; size4 = in.arrayNext()) {
                for (; size4 != 0; size4--) {
                    java.lang.Float e4 = (ga4 != null ? ga4.peek() : null);
                    e4 = in.readFloat();
                    a4.add(e4);
                }
            }

            long size5 = in.readArrayStart();
            java.util.List<java.lang.Float> a5 = this.wheelSpeed;
            if (a5 == null) {
                a5 = new SpecificData.Array<java.lang.Float>((int) size5, SCHEMA$.getField("wheelSpeed").schema());
                this.wheelSpeed = a5;
            } else a5.clear();
            SpecificData.Array<java.lang.Float> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a5 : null);
            for (; 0 < size5; size5 = in.arrayNext()) {
                for (; size5 != 0; size5--) {
                    java.lang.Float e5 = (ga5 != null ? ga5.peek() : null);
                    e5 = in.readFloat();
                    a5.add(e5);
                }
            }

        } else {
            for (int i = 0; i < 17; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.angularAccelerationX = in.readFloat();
                        break;

                    case 1:
                        this.angularAccelerationY = in.readFloat();
                        break;

                    case 2:
                        this.angularAccelerationZ = in.readFloat();
                        break;

                    case 3:
                        this.angularVelocityX = in.readFloat();
                        break;

                    case 4:
                        this.angularVelocityY = in.readFloat();
                        break;

                    case 5:
                        this.angularVelocityZ = in.readFloat();
                        break;

                    case 6:
                        long size0 = in.readArrayStart();
                        java.util.List<com.jordanupmc.publisher.dto.CarMotionData> a0 = this.carMotionData;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData>((int) size0, SCHEMA$.getField("carMotionData").schema());
                            this.carMotionData = a0;
                        } else a0.clear();
                        SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.jordanupmc.publisher.dto.CarMotionData>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                com.jordanupmc.publisher.dto.CarMotionData e0 = (ga0 != null ? ga0.peek() : null);
                                if (e0 == null) {
                                    e0 = new com.jordanupmc.publisher.dto.CarMotionData();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    case 7:
                        this.frontWheelsAngle = in.readFloat();
                        break;

                    case 8:
                        if (this.header == null) {
                            this.header = new com.jordanupmc.publisher.dto.PacketHeader();
                        }
                        this.header.customDecode(in);
                        break;

                    case 9:
                        this.localVelocityX = in.readFloat();
                        break;

                    case 10:
                        this.localVelocityY = in.readFloat();
                        break;

                    case 11:
                        this.localVelocityZ = in.readFloat();
                        break;

                    case 12:
                        long size1 = in.readArrayStart();
                        java.util.List<java.lang.Float> a1 = this.suspensionAcceleration;
                        if (a1 == null) {
                            a1 = new SpecificData.Array<java.lang.Float>((int) size1, SCHEMA$.getField("suspensionAcceleration").schema());
                            this.suspensionAcceleration = a1;
                        } else a1.clear();
                        SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a1 : null);
                        for (; 0 < size1; size1 = in.arrayNext()) {
                            for (; size1 != 0; size1--) {
                                java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
                                e1 = in.readFloat();
                                a1.add(e1);
                            }
                        }
                        break;

                    case 13:
                        long size2 = in.readArrayStart();
                        java.util.List<java.lang.Float> a2 = this.suspensionPosition;
                        if (a2 == null) {
                            a2 = new SpecificData.Array<java.lang.Float>((int) size2, SCHEMA$.getField("suspensionPosition").schema());
                            this.suspensionPosition = a2;
                        } else a2.clear();
                        SpecificData.Array<java.lang.Float> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a2 : null);
                        for (; 0 < size2; size2 = in.arrayNext()) {
                            for (; size2 != 0; size2--) {
                                java.lang.Float e2 = (ga2 != null ? ga2.peek() : null);
                                e2 = in.readFloat();
                                a2.add(e2);
                            }
                        }
                        break;

                    case 14:
                        long size3 = in.readArrayStart();
                        java.util.List<java.lang.Float> a3 = this.suspensionVelocity;
                        if (a3 == null) {
                            a3 = new SpecificData.Array<java.lang.Float>((int) size3, SCHEMA$.getField("suspensionVelocity").schema());
                            this.suspensionVelocity = a3;
                        } else a3.clear();
                        SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a3 : null);
                        for (; 0 < size3; size3 = in.arrayNext()) {
                            for (; size3 != 0; size3--) {
                                java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
                                e3 = in.readFloat();
                                a3.add(e3);
                            }
                        }
                        break;

                    case 15:
                        long size4 = in.readArrayStart();
                        java.util.List<java.lang.Float> a4 = this.wheelSlip;
                        if (a4 == null) {
                            a4 = new SpecificData.Array<java.lang.Float>((int) size4, SCHEMA$.getField("wheelSlip").schema());
                            this.wheelSlip = a4;
                        } else a4.clear();
                        SpecificData.Array<java.lang.Float> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a4 : null);
                        for (; 0 < size4; size4 = in.arrayNext()) {
                            for (; size4 != 0; size4--) {
                                java.lang.Float e4 = (ga4 != null ? ga4.peek() : null);
                                e4 = in.readFloat();
                                a4.add(e4);
                            }
                        }
                        break;

                    case 16:
                        long size5 = in.readArrayStart();
                        java.util.List<java.lang.Float> a5 = this.wheelSpeed;
                        if (a5 == null) {
                            a5 = new SpecificData.Array<java.lang.Float>((int) size5, SCHEMA$.getField("wheelSpeed").schema());
                            this.wheelSpeed = a5;
                        } else a5.clear();
                        SpecificData.Array<java.lang.Float> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a5 : null);
                        for (; 0 < size5; size5 = in.arrayNext()) {
                            for (; size5 != 0; size5--) {
                                java.lang.Float e5 = (ga5 != null ? ga5.peek() : null);
                                e5 = in.readFloat();
                                a5.add(e5);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










